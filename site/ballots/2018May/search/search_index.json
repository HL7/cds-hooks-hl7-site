{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This specification describes a \"hook\" -based pattern for invoking decision support from within a clinician's EHR workflow. The API supports: Synchronous, workflow-triggered CDS calls returning information and suggestions Launching a user-facing SMART app when CDS requires additional interaction The CDS Hooks API is still in active development and thus subject to change. We're currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved! How it works User activity inside the EHR triggers CDS hooks in real-time. For example: patient-view when opening a new patient record medication-prescribe on authoring a new prescription order-review on viewing pending orders for approval When a triggering activity occurs, the EHR notifies each CDS service registered for the activity. These services must then provide near-real-time feedback about the triggering event. Each service gets basic details about the EHR context (via the context parameter of the hook) plus whatever service-specific data are required (via the pre-fetch-template parameter). CDS Cards Each CDS service can return any number of cards in response to the hook. Cards convey some combination of text ( information card ), alternative suggestions ( suggestion card ), and links to apps or reference materials ( app link card ). A user sees these cards \u2014 one or more of each type \u2014 embedded in the EHR, and can interact with them as follows: information card : provides text for the user to read. suggestion card : provides a specific suggestion for which the EHR renders a button that the user can click to accept. Clicking automatically populates the suggested change into the EHR's UI. app link card : provides a link to an app (often a SMART app) where the user can supply details, step through a flowchart, or do anything else required to help reach an informed decision. Try it! You can try CDS Hooks in our Sandbox at http://sandbox.cds-hooks.org","title":"Overview"},{"location":"#overview","text":"This specification describes a \"hook\" -based pattern for invoking decision support from within a clinician's EHR workflow. The API supports: Synchronous, workflow-triggered CDS calls returning information and suggestions Launching a user-facing SMART app when CDS requires additional interaction The CDS Hooks API is still in active development and thus subject to change. We're currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved!","title":"Overview"},{"location":"#how-it-works","text":"User activity inside the EHR triggers CDS hooks in real-time. For example: patient-view when opening a new patient record medication-prescribe on authoring a new prescription order-review on viewing pending orders for approval When a triggering activity occurs, the EHR notifies each CDS service registered for the activity. These services must then provide near-real-time feedback about the triggering event. Each service gets basic details about the EHR context (via the context parameter of the hook) plus whatever service-specific data are required (via the pre-fetch-template parameter).","title":"How it works"},{"location":"#cds-cards","text":"Each CDS service can return any number of cards in response to the hook. Cards convey some combination of text ( information card ), alternative suggestions ( suggestion card ), and links to apps or reference materials ( app link card ). A user sees these cards \u2014 one or more of each type \u2014 embedded in the EHR, and can interact with them as follows: information card : provides text for the user to read. suggestion card : provides a specific suggestion for which the EHR renders a button that the user can click to accept. Clicking automatically populates the suggested change into the EHR's UI. app link card : provides a link to an app (often a SMART app) where the user can supply details, step through a flowchart, or do anything else required to help reach an informed decision.","title":"CDS Cards"},{"location":"#try-it","text":"You can try CDS Hooks in our Sandbox at http://sandbox.cds-hooks.org","title":"Try it!"},{"location":"community/","text":"Community Get Involved There are several ways in which you can get involved with the CDS Hooks community. Ask a question and participate in discussions via the CDS Hooks Google Group Chat via Zulip at https://chat.fhir.org in the cds-hooks stream Contribute to the code and documentation on Github Check out the CDS services available for testing and contribute your own. CDS Hooks Sprint Program Objectives Promote creation of clinical-grade service integrations (EHRs + CDS Services) Gain implementation experience with real-world systems Refine the spec, balancing ease of use, flexibility, and stability Drive toward pilot deployments with the ability to measure results Want to help build our test infrastructure? help-wanted issues Proposed Milestones","title":"Community"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#get-involved","text":"There are several ways in which you can get involved with the CDS Hooks community. Ask a question and participate in discussions via the CDS Hooks Google Group Chat via Zulip at https://chat.fhir.org in the cds-hooks stream Contribute to the code and documentation on Github Check out the CDS services available for testing and contribute your own.","title":"Get Involved"},{"location":"community/#cds-hooks-sprint-program","text":"","title":"CDS Hooks Sprint Program"},{"location":"community/#objectives","text":"Promote creation of clinical-grade service integrations (EHRs + CDS Services) Gain implementation experience with real-world systems Refine the spec, balancing ease of use, flexibility, and stability Drive toward pilot deployments with the ability to measure results","title":"Objectives"},{"location":"community/#want-to-help-build-our-test-infrastructure","text":"help-wanted issues Proposed Milestones","title":"Want to help build our test infrastructure?"},{"location":"examples/","text":"Examples CDC Guideline for Prescribing Opioids for Chronic Pain CDS Service Request The example illustrates a prescription for Acetaminophen/Hydrocodone Bitartrate for a patient that already has a prescription for Oxycodone Hydrochloride: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.com , hook : medication-prescribe , user : Practitioner/example , context : { medications : [ { resourceType : MedicationOrder , id : medrx001 , dateWritten : 2017-05-05 , status : draft , patient : { reference : Patient/example }, medicationCodeableConcept : { coding : [ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 857001 , display : Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet } ] }, dosageInstruction : [ { text : Take 1 tablet Oral every 4 hours as needed , timing : { repeat : { frequency : 6 , frequencyMax : 6 , period : 1 , unit : d } }, asNeededBoolean : true , doseQuantity : { value : 10 , unit : mg , system : http://unitsofmeasure.org , code : mg } } ] } ], patientId : 1288992 }, prefetch : { medication : { response : { status : 200 OK }, resource : { resourceType : MedicationOrder , id : medrx002 , dateWritten : 2017-04-25 , status : active , patient : { reference : Patient/example }, medicationCodeableConcept : { coding : [ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 1049621 , display : Oxycodone Hydrochloride 5 MG Oral Tablet } ] }, dosageInstruction : [ { text : Take 1 tablet by mouth every 4 hours as needed for pain. , timing : { repeat : { frequency : 6 , period : 1 , periodUnits : d } }, asNeededBoolean : true , doseQuantity : { value : 5 , unit : mg , system : http://unitsofmeasure.org , code : mg } } ] } } } } This example illustrates the use of the CDS Hooks medication-prescribe hook to implement Recommendation #5 from the CDC guideline for prescribing opioids for chronic pain . This example is taken from the Opioid Prescribing Support Implementation Guide , developed in partnership with the Centers for Disease Control and Prevention (CDC) . CDS Service Response The opioid guideline request results in the following response that indicates the patient is at high risk for opioid overdose according to the CDC guidelines, and the dosage should be tapered to less than 50 MME. Links are provided to the guideline, as well as to the MME conversion tables provided by CDC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { summary : High risk for opioid overdose - taper now , indicator : warning , links : [ { label : CDC guideline for prescribing opioids for chronic pain , type : absolute , url : https://guidelines.gov/summaries/summary/50153/cdc-guideline-for-prescribing-opioids-for-chronic-pain---united-states-2016#420 }, { label : MME Conversion Tables , type : absolute , url : https://www.cdc.gov/drugoverdose/pdf/calculating_total_daily_dose-a.pdf } ], detail : Total morphine milligram equivalent (MME) is 125mg. Taper to less than 50. } Radiology Appropriateness CDS Service Request This example illustrates the use of the CDS Hooks order-review hook to implement Radiology Appropriateness scoring. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.com , hook : order-review , user : Practitioner/example , context : { orders : [ { resourceType : ProcedureRequest , id : procedure-request-1 , status : draft , intent : proposal , priority : routine , code : { coding : [{ system : http://www.ama-assn.org/go/cpt , code : 70450 , display : CT, head, wo iv contrast }] }, subject : { reference : Patient/example }, requester : { agent : { reference : Practitioner/exampmle } } } ], patientId : 1288992 } } CDS Service Response The appropriateness score is communicated via an update of the procedure request that adds an extension element to indicate the appropriateness rating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { cards : [ { summary : Usually appropriate , indicator : info , detail : The requested procedure is usually appropriate for the given indications. , suggestions : [ { label : The appropriateness score for this procedure given these indications is 9, usually appropriate. , actions : [{ type : update , description : Update the order to record the appropriateness score. , resource : { resourceType : ProcedureRequest , id : procedure-request-1 , extension : [ { url : http://hl7.org/fhir/us/qicore/StructureDefinition/procedurerequest-appropriatenessScore , valueDecimal : 9 } ], status : draft , intent : proposal , priority : routine , code : { coding : [{ system : http://www.ama-assn.org/go/cpt , code : 70450 , display : CT, head, wo iv contrast }] }, subject : { reference : Patient/example }, requester : { agent : { reference : Practitioner/exampmle } } } }] } ] } ] }","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#cdc-guideline-for-prescribing-opioids-for-chronic-pain","text":"CDS Service Request The example illustrates a prescription for Acetaminophen/Hydrocodone Bitartrate for a patient that already has a prescription for Oxycodone Hydrochloride: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.com , hook : medication-prescribe , user : Practitioner/example , context : { medications : [ { resourceType : MedicationOrder , id : medrx001 , dateWritten : 2017-05-05 , status : draft , patient : { reference : Patient/example }, medicationCodeableConcept : { coding : [ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 857001 , display : Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet } ] }, dosageInstruction : [ { text : Take 1 tablet Oral every 4 hours as needed , timing : { repeat : { frequency : 6 , frequencyMax : 6 , period : 1 , unit : d } }, asNeededBoolean : true , doseQuantity : { value : 10 , unit : mg , system : http://unitsofmeasure.org , code : mg } } ] } ], patientId : 1288992 }, prefetch : { medication : { response : { status : 200 OK }, resource : { resourceType : MedicationOrder , id : medrx002 , dateWritten : 2017-04-25 , status : active , patient : { reference : Patient/example }, medicationCodeableConcept : { coding : [ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 1049621 , display : Oxycodone Hydrochloride 5 MG Oral Tablet } ] }, dosageInstruction : [ { text : Take 1 tablet by mouth every 4 hours as needed for pain. , timing : { repeat : { frequency : 6 , period : 1 , periodUnits : d } }, asNeededBoolean : true , doseQuantity : { value : 5 , unit : mg , system : http://unitsofmeasure.org , code : mg } } ] } } } } This example illustrates the use of the CDS Hooks medication-prescribe hook to implement Recommendation #5 from the CDC guideline for prescribing opioids for chronic pain . This example is taken from the Opioid Prescribing Support Implementation Guide , developed in partnership with the Centers for Disease Control and Prevention (CDC) . CDS Service Response The opioid guideline request results in the following response that indicates the patient is at high risk for opioid overdose according to the CDC guidelines, and the dosage should be tapered to less than 50 MME. Links are provided to the guideline, as well as to the MME conversion tables provided by CDC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { summary : High risk for opioid overdose - taper now , indicator : warning , links : [ { label : CDC guideline for prescribing opioids for chronic pain , type : absolute , url : https://guidelines.gov/summaries/summary/50153/cdc-guideline-for-prescribing-opioids-for-chronic-pain---united-states-2016#420 }, { label : MME Conversion Tables , type : absolute , url : https://www.cdc.gov/drugoverdose/pdf/calculating_total_daily_dose-a.pdf } ], detail : Total morphine milligram equivalent (MME) is 125mg. Taper to less than 50. }","title":"CDC Guideline for Prescribing Opioids for Chronic Pain"},{"location":"examples/#radiology-appropriateness","text":"CDS Service Request This example illustrates the use of the CDS Hooks order-review hook to implement Radiology Appropriateness scoring. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.com , hook : order-review , user : Practitioner/example , context : { orders : [ { resourceType : ProcedureRequest , id : procedure-request-1 , status : draft , intent : proposal , priority : routine , code : { coding : [{ system : http://www.ama-assn.org/go/cpt , code : 70450 , display : CT, head, wo iv contrast }] }, subject : { reference : Patient/example }, requester : { agent : { reference : Practitioner/exampmle } } } ], patientId : 1288992 } } CDS Service Response The appropriateness score is communicated via an update of the procedure request that adds an extension element to indicate the appropriateness rating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { cards : [ { summary : Usually appropriate , indicator : info , detail : The requested procedure is usually appropriate for the given indications. , suggestions : [ { label : The appropriateness score for this procedure given these indications is 9, usually appropriate. , actions : [{ type : update , description : Update the order to record the appropriateness score. , resource : { resourceType : ProcedureRequest , id : procedure-request-1 , extension : [ { url : http://hl7.org/fhir/us/qicore/StructureDefinition/procedurerequest-appropriatenessScore , valueDecimal : 9 } ], status : draft , intent : proposal , priority : routine , code : { coding : [{ system : http://www.ama-assn.org/go/cpt , code : 70450 , display : CT, head, wo iv contrast }] }, subject : { reference : Patient/example }, requester : { agent : { reference : Practitioner/exampmle } } } }] } ] } ] }","title":"Radiology Appropriateness"},{"location":"quickstart/","text":"Quick Start This quick start tutorial defines each of the actors and provides details for implementing the patient-view hook. A CDS Hooks scenario typically includes two main actors: an EHR and a CDS Service. Below is an example interaction for the patient-view hook. Building a CDS Service A CDS Service is an external service that responds to EHR requests through cards. There are several steps to setting up a CDS Service: Create an endpoint for discovery Develop a service Test the service with the sandbox Create a SMART app (or borrow one ) Test the service and SMART app with an EHR This tutorial recommends implementing the CDS Hooks security model after successful open access testing. Endpoint for discovery The CDS Service must provide a stable endpoint for the EHR to discover the available services. A system must expose their services at {baseUrl}/cds-services . A service endpoint that supports the patient-view hook may return: 1 2 3 4 5 6 7 8 9 10 11 12 13 { services : [ { hook : patient-view , name : Static CDS Service Example , description : An example of a CDS Service that returns a card with SMART app recommendations. , id : static-patient-view , prefetch : { patientToGreet : Patient/{{Patient.id}} } } ] } The attributes available to describe a CDS Services is documented in the CDS Hooks specification . Develop a service With a stable open end point available it's time to complete development of a service. A CDS Service could provide information , a suggestion , or a SMART app link. The focus of the Argonaut CDS Hooks effort is a patient-view hook launching a SMART app so this guide will focus on the SMART app link. A CDS patient-view hook could return the following card: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { cards : [ { summary : SMART App Success Card , indicator : success , detail : This is an example SMART App success card. , source : { label : Static CDS Service Example , url : https://example.com }, links : [ { label : SMART Example App , url : https://smart.example.com/launch , type : smart } ] } ] } Create a SMART App You may already have created a SMART app prior to this step, but just in case this is a reminder. The SMART app is launched from the link returned in your service. If you want to borrow a SMART app, check out the app gallery . Test service with a sandbox The CDS Hooks community provides a publicly available sandbox to test your service. Select the configure hooks: Delete the existing hooks, and then do a quick add with a reference to your CDS Service: After testing with the sandbox, you are ready to connect with an EHR service. Building an EHR Service Build out following sections: Calls discovery endpoint Invoke service on patient-view Support for FHIR resources on request (context or pre-fetch) Exposed non-secured FHIR server Render card Launch SMART app Tested with external CDS Service This tutorial recommends implementing the CDS Hooks security model after successful open access testing. Calls discovery endpoint The CDS discovery endpoint provides the list of services a CDS provider supports, and the hooks a service should be invoked on. An EHR may configure their system to support a set of hooks at a certain location in their users work flow, or build a dynamic capability to interact with a CDS Service provider within a work flow. For the best end-user experience, this guide recommends a business analyst configure which hooks an EHR will support. Below is an example work flow where a business analyst accesses this list of available services by calling GET https://example.com/cds-services and then configures them in the system. This image captures a business analyst reviewing services from one CDS provider. A business analyst may review services from multiple providers and configure appropriate services per user profiles. Invoke service on patient-view hook The patient-view hook is invoked when a patient chart is opened. It's one of the most basic since the logic doesn't have any prior workflow dependencies. The service called on the patient-view hook could be dependent on patient characteristics, for example: sex, problems in problems list, active medications, etc. The current version of the CDS Hooks specification allows the EHR to decide which characteristics to consider. Support for FHIR resources on request or prefetch Often a CDS Service will require additional information from the EHR to perform the decision support logic, or determine the appropriate SMART app to return. Prefetch provides the EHR the capability to pass a resource when invoking a service. For example, with a patient resource included a service could do a geography search for potential environmental risk factors. Below is an example request invoked on patient-view with a patient included: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { hookInstance : 23f1a303-991f-4118-86c5-11d99a39222e , fhirServer : https://fhir.example.org , hook : patient-view , user : Practitioner/example , context : { patientId : 1288992 , }, prefetch : { patientToGreet : { resourceType : Patient , gender : male , birthDate : 1925-12-23 , id : 1288992 , active : true } } } In some cases, additional information beyond what is included in the prefetch may be required. The CDS Service can request additional information using the FHIR REST APIs: GET [base]/AllergyIntolerance?patient=[id] It is recommended FHIR servers implement, and CDS Services follow, locale specific implementation guides. In the US, the recommended implementation guides to follow are the Argonaut Data Query Guide (DSTU2) or HL7 US Core (STU3) . Each profile page within these implementation guides includes queries FHIR servers are required to support. Exposed non-secured FHIR server A non secured FHIR server is important to support testing with a CDS Service. When the EHR moves a hook to production the system is expected to follow the guidelines in the security requirements. Render card The CDS Service will provide a response in the form a of a 'card'. Your EHR needs to be able to display the card. Example card JSON: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { summary : Bilirubin: Based on the age of this patient consider overlaying bilirubin [Mass/volume] results over a time-based risk chart , indicator : info , detail : The focus of this app is to reduce the incidence of severe hyperbilirubinemia and bilirubin encephalopathy while minimizing the risks of unintended harm such as maternal anxiety, decreased breastfeeding, and unnecessary costs or treatment. , source : { name : Intermountain , url : null }, links : [ { label : Bilirubin SMART app , url : https://example.com/launch , type : smart } ] } Example card rendered: Launch SMART app For some CDS Services the end step will just display the card. For the patient-view hook discussed here, we are focused on launching a SMART app. The CDS Hooks guide places no additional constraints for launching a SMART app beyond those from SMART on FHIR . Test with an external CDS Service No development is complete without testing with a CDS Service provider. Find a member in the community and test away.","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"This quick start tutorial defines each of the actors and provides details for implementing the patient-view hook. A CDS Hooks scenario typically includes two main actors: an EHR and a CDS Service. Below is an example interaction for the patient-view hook.","title":"Quick Start"},{"location":"quickstart/#building-a-cds-service","text":"A CDS Service is an external service that responds to EHR requests through cards. There are several steps to setting up a CDS Service: Create an endpoint for discovery Develop a service Test the service with the sandbox Create a SMART app (or borrow one ) Test the service and SMART app with an EHR This tutorial recommends implementing the CDS Hooks security model after successful open access testing.","title":"Building a CDS Service"},{"location":"quickstart/#endpoint-for-discovery","text":"The CDS Service must provide a stable endpoint for the EHR to discover the available services. A system must expose their services at {baseUrl}/cds-services . A service endpoint that supports the patient-view hook may return: 1 2 3 4 5 6 7 8 9 10 11 12 13 { services : [ { hook : patient-view , name : Static CDS Service Example , description : An example of a CDS Service that returns a card with SMART app recommendations. , id : static-patient-view , prefetch : { patientToGreet : Patient/{{Patient.id}} } } ] } The attributes available to describe a CDS Services is documented in the CDS Hooks specification .","title":"Endpoint for discovery"},{"location":"quickstart/#develop-a-service","text":"With a stable open end point available it's time to complete development of a service. A CDS Service could provide information , a suggestion , or a SMART app link. The focus of the Argonaut CDS Hooks effort is a patient-view hook launching a SMART app so this guide will focus on the SMART app link. A CDS patient-view hook could return the following card: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { cards : [ { summary : SMART App Success Card , indicator : success , detail : This is an example SMART App success card. , source : { label : Static CDS Service Example , url : https://example.com }, links : [ { label : SMART Example App , url : https://smart.example.com/launch , type : smart } ] } ] }","title":"Develop a service"},{"location":"quickstart/#create-a-smart-app","text":"You may already have created a SMART app prior to this step, but just in case this is a reminder. The SMART app is launched from the link returned in your service. If you want to borrow a SMART app, check out the app gallery .","title":"Create a SMART App"},{"location":"quickstart/#test-service-with-a-sandbox","text":"The CDS Hooks community provides a publicly available sandbox to test your service. Select the configure hooks: Delete the existing hooks, and then do a quick add with a reference to your CDS Service: After testing with the sandbox, you are ready to connect with an EHR service.","title":"Test service with a sandbox"},{"location":"quickstart/#building-an-ehr-service","text":"Build out following sections: Calls discovery endpoint Invoke service on patient-view Support for FHIR resources on request (context or pre-fetch) Exposed non-secured FHIR server Render card Launch SMART app Tested with external CDS Service This tutorial recommends implementing the CDS Hooks security model after successful open access testing.","title":"Building an EHR Service"},{"location":"quickstart/#calls-discovery-endpoint","text":"The CDS discovery endpoint provides the list of services a CDS provider supports, and the hooks a service should be invoked on. An EHR may configure their system to support a set of hooks at a certain location in their users work flow, or build a dynamic capability to interact with a CDS Service provider within a work flow. For the best end-user experience, this guide recommends a business analyst configure which hooks an EHR will support. Below is an example work flow where a business analyst accesses this list of available services by calling GET https://example.com/cds-services and then configures them in the system. This image captures a business analyst reviewing services from one CDS provider. A business analyst may review services from multiple providers and configure appropriate services per user profiles.","title":"Calls discovery endpoint"},{"location":"quickstart/#invoke-service-on-patient-view-hook","text":"The patient-view hook is invoked when a patient chart is opened. It's one of the most basic since the logic doesn't have any prior workflow dependencies. The service called on the patient-view hook could be dependent on patient characteristics, for example: sex, problems in problems list, active medications, etc. The current version of the CDS Hooks specification allows the EHR to decide which characteristics to consider.","title":"Invoke service on patient-view hook"},{"location":"quickstart/#support-for-fhir-resources-on-request-or-prefetch","text":"Often a CDS Service will require additional information from the EHR to perform the decision support logic, or determine the appropriate SMART app to return. Prefetch provides the EHR the capability to pass a resource when invoking a service. For example, with a patient resource included a service could do a geography search for potential environmental risk factors. Below is an example request invoked on patient-view with a patient included: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { hookInstance : 23f1a303-991f-4118-86c5-11d99a39222e , fhirServer : https://fhir.example.org , hook : patient-view , user : Practitioner/example , context : { patientId : 1288992 , }, prefetch : { patientToGreet : { resourceType : Patient , gender : male , birthDate : 1925-12-23 , id : 1288992 , active : true } } } In some cases, additional information beyond what is included in the prefetch may be required. The CDS Service can request additional information using the FHIR REST APIs: GET [base]/AllergyIntolerance?patient=[id] It is recommended FHIR servers implement, and CDS Services follow, locale specific implementation guides. In the US, the recommended implementation guides to follow are the Argonaut Data Query Guide (DSTU2) or HL7 US Core (STU3) . Each profile page within these implementation guides includes queries FHIR servers are required to support.","title":"Support for FHIR resources on request or prefetch"},{"location":"quickstart/#exposed-non-secured-fhir-server","text":"A non secured FHIR server is important to support testing with a CDS Service. When the EHR moves a hook to production the system is expected to follow the guidelines in the security requirements.","title":"Exposed non-secured FHIR server"},{"location":"quickstart/#render-card","text":"The CDS Service will provide a response in the form a of a 'card'. Your EHR needs to be able to display the card. Example card JSON: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { summary : Bilirubin: Based on the age of this patient consider overlaying bilirubin [Mass/volume] results over a time-based risk chart , indicator : info , detail : The focus of this app is to reduce the incidence of severe hyperbilirubinemia and bilirubin encephalopathy while minimizing the risks of unintended harm such as maternal anxiety, decreased breastfeeding, and unnecessary costs or treatment. , source : { name : Intermountain , url : null }, links : [ { label : Bilirubin SMART app , url : https://example.com/launch , type : smart } ] } Example card rendered:","title":"Render card"},{"location":"quickstart/#launch-smart-app","text":"For some CDS Services the end step will just display the card. For the patient-view hook discussed here, we are focused on launching a SMART app. The CDS Hooks guide places no additional constraints for launching a SMART app beyond those from SMART on FHIR .","title":"Launch SMART app"},{"location":"quickstart/#test-with-an-external-cds-service","text":"No development is complete without testing with a CDS Service provider. Find a member in the community and test away.","title":"Test with an external CDS Service"},{"location":"hooks/","text":"Hooks Overview As a specification, CDS Hooks does not prescribe a default or required set of hooks for implementers. Rather, the set of hooks defined here are merely a set of common use cases that were used to aid in the creation of CDS Hooks. The set of hooks defined here are not a closed set; anyone is able to define new hooks to fit their use cases. New hooks should be added to the CDS proposed hooks Wiki page according to the format described below. A template hook definition is included as a starting point for new hooks. Note that each hook (e.g. medication-prescribe ) represents something the user is doing in the EHR and multiple CDS Services might respond to the same hook (e.g. a \"price check\" service and a \"prior authorization\" service might both respond to medication-prescribe ). Hook context and prefetch What's the difference? A discrete user workflow or action within the EHR often naturally includes a set of contextual data. This context can contain both required and optional data and is specific to a hook. Additionally, the context data is relevant to most CDS Services subscribing to the hook. When the context data relates to a FHIR data type, it is important not to conflate context and prefetch. For instance, imagine a hook for opening a patient's chart. This hook should include the FHIR identifier of the patient whose chart is being opened, not the full patient FHIR resource. In this case, the FHIR identifier of the patient is appropriate as CDS Services may not be interested in details about the patient resource but instead other data related to this patient. Or, a CDS Service may only need the full patient resource in certain scenarios. Therefore, including the full patient resource in context would be unnecessary. For CDS Services that want the full patient resource, they can request it to be prefetched or fetch it as needed from the FHIR server. Consider another hook for when a new patient is being registered. In this case, it would likely be appropriate for the context to contain the full FHIR resource for the patient being registered as the patient may not be yet recorded in the EHR (and thus not available from the FHIR server) and CDS Services using this hook would predominantly be interested in the details of the patient being registered. Additionally, consider a PGX CDS Service and a Zika screening CDS Service, each of which is subscribed to the same hook. The context data specified by their shared hook should contain data relevant to both CDS Services; however, each service will have other specific data needs that will necessitate disparate prefetch requests. For instance, the PGX CDS Service likely is interested in genomics data whereas the Zika screening CDS Service will want Observations. In summary, context is data specific to a hook and universally relevant to all CDS Services subscribed to said hook. Prefetch data is unique to individual CDS Services and supplements the data from context. Prefetch tokens Often a prefetch template builds on the contextual data associated with the hook. For example, a particular CDS Service might recommend guidance based on a patient's conditions when the chart is opened. The FHIR query to retrieve these conditions might be Condition?patient=123 . In order to express this as a prefetch template, the CDS Service must express the FHIR identifier of the patient as a token so that the EHR can replace the token with the appropriate value. When context fields are used as tokens, their token name MUST be context.name-of-the-field . For example, given a context like: 1 2 3 context : { patientId : 123 } The token name would be {{context.patientId}} . Again using our above conditions example, the complete prefetch template would be Condition?patient={{context.patientId}} . Only the first level fields in context may be considered for tokens. Hook creators MUST document which fields in the context are supported as tokens. If a context field can be tokenized, the value of the context field MUST be a data type that can placed into a FHIR query (eg, string, number, etc). For example, given the following context that contains amongst other things, a Patient FHIR resource: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 context : { encounterId : 456 , patient : { resourceType : Patient , id : 123 , active : true , name : [ { use : official , family : Watts , given : [ Wade ] } ], gender : male , birthDate : 2024-08-12 } } Only the encounterId field in this example is eligible to be a prefetch token as it is a first level field and the datatype (string) can be placed into the FHIR query. The Patient.id value in the context is not eligible to be a prefetch token because it is not a first level field. If the hook creator intends for the Patient.id value to be available as a prefetch token, it must be made available as a first level field. Using the aforementioned example, we simply add a new patientId field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 context : { patientId : 123 , encounterId : 456 , patient : { resourceType : Patient , id : 123 , active : true , name : [ { use : official , family : Watts , given : [ Wade ] } ], gender : male , birthDate : 2024-08-12 } } Hook Definition Format Hooks are defined in the following format. hook-name-expressed-as-noun-verb The name of the hook SHOULD succinctly and clearly describe the activity or event. Hook names are unique so hook creators SHOULD take care to ensure newly proposed hooks do not conflict with an existing hook name. Hook creators MAY choose to name their hook with a URI (e.g. https://example.org/hooks/patient-transmogrify ) if the hook is specific to an organization. When naming hooks, the name should start with the subject (noun) of the hook and be followed by the activity (verb). For example, patient-view (not view-patient ) or medication-prescribe (not prescribe-medication ). Workflow Describe when this hook occurs in a workflow. Hook creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors. Context Describe the set of contextual data used by this hook. Only data logically and necessarily associated with the purpose of this hook should be represented in context. All fields defined by the hook's context MUST be defined in a table where each field is described by the following attributes: Field: The name of the field in the context JSON object. Optionality: A string value of either REQUIRED or OPTIONAL Prefetch Token: A string value of either Yes or No , indicating whether this field can be tokenized in a prefetch template. Type: The type of the field in the context JSON object, expressed as the JSON type, or the name of a FHIR Resource type. Valid types are boolean , string , number , object , array , or the name of a FHIR resource type. When a field can be of multiple types, type names MUST be separated by a pipe ( | ) Description: A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version. FHIR resources in context When potentially multiple FHIR resources value a single context field, these resources SHOULD be formatted as a FHIR Bundle. For example, multiple FHIR resources are necessary to describe all of the orders under review in the order-review hook's orders field. Hook definitions SHOULD prefer the use of FHIR Bundles over other bespoke data structures. Often, context is populated with in-progress or in-memory data that may not yet be available from the FHIR server. For example, medication-prescribe and order-review define context fields containing FHIR resources that represent draft resources. In this case, the EHR should only provide these draft resources and not the full set of orders available from its FHIR server. The CDS service MAY pre-fetch or query for FHIR resources with other statuses. All FHIR resources in context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description someField REQUIRED Yes string A clear description of the value of this field. anotherField OPTIONAL No number A clear description of the value of this field. someObject REQUIRED No object A clear description of the value of this field. moreObjects OPTIONAL No array A clear description of the items in this array. allFHIR OPTIONAL No object A FHIR Bundle of the following FHIR resources using a specific version of FHIR. Examples Hook creators SHOULD include examples of the context. 1 2 3 4 5 6 7 8 9 context : { someField : foo , anotherField : 123 , someObject : { color : red , version : 1 }, moreObjects :[] } If the context contains FHIR data, hook creators SHOULD include examples across multiple versions of FHIR if differences across FHIR versions are possible. Changes to the Definition of a Hook (Hook Versioning) Each hook MUST include a Metadata table at the beginning of the hook with the specification version and hook version as described in the following sections. Specification Version Because hooks are such an integral part of the CDS Hooks specification, hook definitions are associated with specific versions of the specification. The hook definition MUST include the version (or versions) of the CDS Hooks specification that it is defined to work with. 1 specificationVersion | 1.0 Because the specification itself follows semantic versioning, the version specified here is a minimum specification version. In other words, a hook defined to work against 1.0 should continue to work against the 1.1 version of CDS Hooks. However, a hook that specifies 1.1 would not be expected to work in a CDS Hooks 1.0 environment. Hook Version To enable tracking of changes to hook definitions, each hook MUST include a version indicator, expressed as a string. 1 hookVersion | 1.0 To help ensure the stability of CDS Hooks implementations, once a hook has been defined (i.e. published with a particular name so that it is available for implementation), breaking changes MUST NOT be made. This means that fields can be added and restrictions relaxed, but fields cannot be changed, and restrictions cannot be tightened. In particular, the semantics of a hook (i.e. the meaning of the hook from the perspective of the EHR) cannot be changed. EHRs that implement specific hooks are responsible for ensuring the hook is called from the appropriate point in the workflow. Note that this means that the name of the hook carries major version semantics. That is not to say that the name must include the major version, that is left as a choice by users of the specification. Clean hook names increase usability. Ideally, an active hook name accurately defines the meaning and workflow of the hook in actual words. The following types of changes are possible for a hook definition: Change Version Impact Clarifications and corrections to documentation that do not impact functionality Patch Change of prefetch token status of an existing context field Patch Addition of a new field to the context Minor Change of optionality of an existing context field Major Change of type or cardinality of an existing context field Major Removal of an existing context field Major Change of semantics of an existing context field Major Change of semantics of the hook Major When a major change is made, the hook definition MUST be published under a new name. When a minor or patch change is made, the hook version MUST be updated. Hook definers MUST use semantic versioning to communicate the impact of changes in an industry standard way. Change Log Changes made to a hook MUST be documented in a change log to ensure hook consumers can track what has been changed over the life of a hook. The change log MUST contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context variable 1.0.1 Clarified context variable usage 1.0 Initial Release","title":"Hooks"},{"location":"hooks/#hooks","text":"","title":"Hooks"},{"location":"hooks/#overview","text":"As a specification, CDS Hooks does not prescribe a default or required set of hooks for implementers. Rather, the set of hooks defined here are merely a set of common use cases that were used to aid in the creation of CDS Hooks. The set of hooks defined here are not a closed set; anyone is able to define new hooks to fit their use cases. New hooks should be added to the CDS proposed hooks Wiki page according to the format described below. A template hook definition is included as a starting point for new hooks. Note that each hook (e.g. medication-prescribe ) represents something the user is doing in the EHR and multiple CDS Services might respond to the same hook (e.g. a \"price check\" service and a \"prior authorization\" service might both respond to medication-prescribe ).","title":"Overview"},{"location":"hooks/#hook-context-and-prefetch","text":"","title":"Hook context and prefetch"},{"location":"hooks/#whats-the-difference","text":"A discrete user workflow or action within the EHR often naturally includes a set of contextual data. This context can contain both required and optional data and is specific to a hook. Additionally, the context data is relevant to most CDS Services subscribing to the hook. When the context data relates to a FHIR data type, it is important not to conflate context and prefetch. For instance, imagine a hook for opening a patient's chart. This hook should include the FHIR identifier of the patient whose chart is being opened, not the full patient FHIR resource. In this case, the FHIR identifier of the patient is appropriate as CDS Services may not be interested in details about the patient resource but instead other data related to this patient. Or, a CDS Service may only need the full patient resource in certain scenarios. Therefore, including the full patient resource in context would be unnecessary. For CDS Services that want the full patient resource, they can request it to be prefetched or fetch it as needed from the FHIR server. Consider another hook for when a new patient is being registered. In this case, it would likely be appropriate for the context to contain the full FHIR resource for the patient being registered as the patient may not be yet recorded in the EHR (and thus not available from the FHIR server) and CDS Services using this hook would predominantly be interested in the details of the patient being registered. Additionally, consider a PGX CDS Service and a Zika screening CDS Service, each of which is subscribed to the same hook. The context data specified by their shared hook should contain data relevant to both CDS Services; however, each service will have other specific data needs that will necessitate disparate prefetch requests. For instance, the PGX CDS Service likely is interested in genomics data whereas the Zika screening CDS Service will want Observations. In summary, context is data specific to a hook and universally relevant to all CDS Services subscribed to said hook. Prefetch data is unique to individual CDS Services and supplements the data from context.","title":"What's the difference?"},{"location":"hooks/#prefetch-tokens","text":"Often a prefetch template builds on the contextual data associated with the hook. For example, a particular CDS Service might recommend guidance based on a patient's conditions when the chart is opened. The FHIR query to retrieve these conditions might be Condition?patient=123 . In order to express this as a prefetch template, the CDS Service must express the FHIR identifier of the patient as a token so that the EHR can replace the token with the appropriate value. When context fields are used as tokens, their token name MUST be context.name-of-the-field . For example, given a context like: 1 2 3 context : { patientId : 123 } The token name would be {{context.patientId}} . Again using our above conditions example, the complete prefetch template would be Condition?patient={{context.patientId}} . Only the first level fields in context may be considered for tokens. Hook creators MUST document which fields in the context are supported as tokens. If a context field can be tokenized, the value of the context field MUST be a data type that can placed into a FHIR query (eg, string, number, etc). For example, given the following context that contains amongst other things, a Patient FHIR resource: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 context : { encounterId : 456 , patient : { resourceType : Patient , id : 123 , active : true , name : [ { use : official , family : Watts , given : [ Wade ] } ], gender : male , birthDate : 2024-08-12 } } Only the encounterId field in this example is eligible to be a prefetch token as it is a first level field and the datatype (string) can be placed into the FHIR query. The Patient.id value in the context is not eligible to be a prefetch token because it is not a first level field. If the hook creator intends for the Patient.id value to be available as a prefetch token, it must be made available as a first level field. Using the aforementioned example, we simply add a new patientId field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 context : { patientId : 123 , encounterId : 456 , patient : { resourceType : Patient , id : 123 , active : true , name : [ { use : official , family : Watts , given : [ Wade ] } ], gender : male , birthDate : 2024-08-12 } }","title":"Prefetch tokens"},{"location":"hooks/#hook-definition-format","text":"Hooks are defined in the following format.","title":"Hook Definition Format"},{"location":"hooks/#hook-name-expressed-as-noun-verb","text":"The name of the hook SHOULD succinctly and clearly describe the activity or event. Hook names are unique so hook creators SHOULD take care to ensure newly proposed hooks do not conflict with an existing hook name. Hook creators MAY choose to name their hook with a URI (e.g. https://example.org/hooks/patient-transmogrify ) if the hook is specific to an organization. When naming hooks, the name should start with the subject (noun) of the hook and be followed by the activity (verb). For example, patient-view (not view-patient ) or medication-prescribe (not prescribe-medication ).","title":"hook-name-expressed-as-noun-verb"},{"location":"hooks/#workflow","text":"Describe when this hook occurs in a workflow. Hook creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors.","title":"Workflow"},{"location":"hooks/#context","text":"Describe the set of contextual data used by this hook. Only data logically and necessarily associated with the purpose of this hook should be represented in context. All fields defined by the hook's context MUST be defined in a table where each field is described by the following attributes: Field: The name of the field in the context JSON object. Optionality: A string value of either REQUIRED or OPTIONAL Prefetch Token: A string value of either Yes or No , indicating whether this field can be tokenized in a prefetch template. Type: The type of the field in the context JSON object, expressed as the JSON type, or the name of a FHIR Resource type. Valid types are boolean , string , number , object , array , or the name of a FHIR resource type. When a field can be of multiple types, type names MUST be separated by a pipe ( | ) Description: A functional description of the context value. If this value can change according to the FHIR version in use, the description SHOULD describe the value for each supported FHIR version.","title":"Context"},{"location":"hooks/#fhir-resources-in-context","text":"When potentially multiple FHIR resources value a single context field, these resources SHOULD be formatted as a FHIR Bundle. For example, multiple FHIR resources are necessary to describe all of the orders under review in the order-review hook's orders field. Hook definitions SHOULD prefer the use of FHIR Bundles over other bespoke data structures. Often, context is populated with in-progress or in-memory data that may not yet be available from the FHIR server. For example, medication-prescribe and order-review define context fields containing FHIR resources that represent draft resources. In this case, the EHR should only provide these draft resources and not the full set of orders available from its FHIR server. The CDS service MAY pre-fetch or query for FHIR resources with other statuses. All FHIR resources in context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description someField REQUIRED Yes string A clear description of the value of this field. anotherField OPTIONAL No number A clear description of the value of this field. someObject REQUIRED No object A clear description of the value of this field. moreObjects OPTIONAL No array A clear description of the items in this array. allFHIR OPTIONAL No object A FHIR Bundle of the following FHIR resources using a specific version of FHIR.","title":"FHIR resources in context"},{"location":"hooks/#examples","text":"Hook creators SHOULD include examples of the context. 1 2 3 4 5 6 7 8 9 context : { someField : foo , anotherField : 123 , someObject : { color : red , version : 1 }, moreObjects :[] } If the context contains FHIR data, hook creators SHOULD include examples across multiple versions of FHIR if differences across FHIR versions are possible.","title":"Examples"},{"location":"hooks/#changes-to-the-definition-of-a-hook-hook-versioning","text":"Each hook MUST include a Metadata table at the beginning of the hook with the specification version and hook version as described in the following sections.","title":"Changes to the Definition of a Hook (Hook Versioning)"},{"location":"hooks/#specification-version","text":"Because hooks are such an integral part of the CDS Hooks specification, hook definitions are associated with specific versions of the specification. The hook definition MUST include the version (or versions) of the CDS Hooks specification that it is defined to work with. 1 specificationVersion | 1.0 Because the specification itself follows semantic versioning, the version specified here is a minimum specification version. In other words, a hook defined to work against 1.0 should continue to work against the 1.1 version of CDS Hooks. However, a hook that specifies 1.1 would not be expected to work in a CDS Hooks 1.0 environment.","title":"Specification Version"},{"location":"hooks/#hook-version","text":"To enable tracking of changes to hook definitions, each hook MUST include a version indicator, expressed as a string. 1 hookVersion | 1.0 To help ensure the stability of CDS Hooks implementations, once a hook has been defined (i.e. published with a particular name so that it is available for implementation), breaking changes MUST NOT be made. This means that fields can be added and restrictions relaxed, but fields cannot be changed, and restrictions cannot be tightened. In particular, the semantics of a hook (i.e. the meaning of the hook from the perspective of the EHR) cannot be changed. EHRs that implement specific hooks are responsible for ensuring the hook is called from the appropriate point in the workflow. Note that this means that the name of the hook carries major version semantics. That is not to say that the name must include the major version, that is left as a choice by users of the specification. Clean hook names increase usability. Ideally, an active hook name accurately defines the meaning and workflow of the hook in actual words. The following types of changes are possible for a hook definition: Change Version Impact Clarifications and corrections to documentation that do not impact functionality Patch Change of prefetch token status of an existing context field Patch Addition of a new field to the context Minor Change of optionality of an existing context field Major Change of type or cardinality of an existing context field Major Removal of an existing context field Major Change of semantics of an existing context field Major Change of semantics of the hook Major When a major change is made, the hook definition MUST be published under a new name. When a minor or patch change is made, the hook version MUST be updated. Hook definers MUST use semantic versioning to communicate the impact of changes in an industry standard way.","title":"Hook Version"},{"location":"hooks/#change-log","text":"Changes made to a hook MUST be documented in a change log to ensure hook consumers can track what has been changed over the life of a hook. The change log MUST contain the following elements: Version: The version of the change Description: A description of the change and its impact For example: Version Description 1.1 Added new context variable 1.0.1 Clarified context variable usage 1.0 Initial Release","title":"Change Log"},{"location":"hooks/medication-prescribe/","text":"medication-prescribe Metadata Value specificationVersion 1.0 hookVersion 1.0 Workflow The user is in the process of prescribing one or more new medications. Context The set of medications proposed or in progress of being prescribed. All FHIR resources in this context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context medications REQUIRED No object DSTU2 - FHIR Bundle of MedicationOrder resources STU3 - FHIR Bundle of MedicationOrder Example (DSTU2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 context : { patientId : 1288992 , encounterId : 89284 , medications :{ resourceType : Bundle , entry :[ { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-103 , status : draft , patient :{ reference : Patient/smart-1081332 }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 617993 , display : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension } ], text : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension }, dosageInstruction :[ { text : 5 mL bid x 10 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-04 }, frequency : 2 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 5 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 10 , unit : days , system : http://unitsofmeasure.org , code : d } } } }, { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-104 , status : draft , patient :{ reference : Patient/smart-1081332 }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 211307 , display : Azithromycin 20 MG/ML Oral Suspension [Zithromax] } ], text : Azithromycin 20 MG/ML Oral Suspension [Zithromax] }, dosageInstruction :[ { text : 15 mL daily x 3 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-18 }, frequency : 1 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 15 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 3 , unit : days , system : http://unitsofmeasure.org , code : d } } } } ] } } Change Log Version Description 1.0 Initial Release","title":"medication-prescribe"},{"location":"hooks/medication-prescribe/#medication-prescribe","text":"Metadata Value specificationVersion 1.0 hookVersion 1.0","title":"medication-prescribe"},{"location":"hooks/medication-prescribe/#workflow","text":"The user is in the process of prescribing one or more new medications.","title":"Workflow"},{"location":"hooks/medication-prescribe/#context","text":"The set of medications proposed or in progress of being prescribed. All FHIR resources in this context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context medications REQUIRED No object DSTU2 - FHIR Bundle of MedicationOrder resources STU3 - FHIR Bundle of MedicationOrder","title":"Context"},{"location":"hooks/medication-prescribe/#example-dstu2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 context : { patientId : 1288992 , encounterId : 89284 , medications :{ resourceType : Bundle , entry :[ { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-103 , status : draft , patient :{ reference : Patient/smart-1081332 }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 617993 , display : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension } ], text : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension }, dosageInstruction :[ { text : 5 mL bid x 10 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-04 }, frequency : 2 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 5 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 10 , unit : days , system : http://unitsofmeasure.org , code : d } } } }, { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-104 , status : draft , patient :{ reference : Patient/smart-1081332 }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 211307 , display : Azithromycin 20 MG/ML Oral Suspension [Zithromax] } ], text : Azithromycin 20 MG/ML Oral Suspension [Zithromax] }, dosageInstruction :[ { text : 15 mL daily x 3 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-18 }, frequency : 1 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 15 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 3 , unit : days , system : http://unitsofmeasure.org , code : d } } } } ] } }","title":"Example (DSTU2)"},{"location":"hooks/medication-prescribe/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"hooks/order-review/","text":"order-review Metadata Value specificationVersion 1.0 hookVersion 1.0 Workflow The user is in the process of reviewing a set of orders to sign. Context The set of orders being reviewed for signature on-screen. All FHIR resources in this context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context orders REQUIRED No object DSTU2 - FHIR Bundle of MedicationOrder, DiagnosticOrder, DeviceUseRequest, ReferralRequest, ProcedureRequest, NutritionOrder, VisionPrescription STU3 - FHIR Bundle of MedicationRequest, ReferralRequest, ProcedureRequest, NutritionOrder, VisionPrescription Example (DSTU2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 context : { patientId : 1288992 , encounterId : 89284 , orders :{ resourceType : Bundle , entry :[ { resource :{ resourceType : NutritionOrder , id : nest-patient-1-NUTR1 , patient :{ reference : Patient/1288992 , display : Tomy Francis }, orderer :{ display : Dr Adam Careful }, identifier :[ { system : http://goodhealthhospital.org/nutrition-orders , value : 123 } ], dateTime : 2014-09-17 , status : draft , oralDiet :{ type :[ { coding :[ { system : http://snomed.info/sct , code : 435801000124108 , display : Texture modified diet }, { system : http://goodhealthhospital.org/diet-type-codes , code : 1010 , display : Texture modified diet } ], text : Texture modified diet } ], schedule :[ { repeat :{ boundsPeriod :{ start : 2015-02-10 }, frequency : 3 , period : 1 , periodUnits : d } } ], texture :[ { modifier :{ coding :[ { system : http://snomed.info/sct , code : 228049004 , display : Chopped food } ], text : Regular, Chopped Meat }, foodType :{ coding :[ { system : http://snomed.info/sct , code : 22836000 , display : Vegetable } ], text : Regular, Chopped Meat } } ] } } }, { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-103 , status : draft , patient :{ reference : Patient/1288992 , display : Tomy Francis }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 617993 , display : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension } ], text : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension }, dosageInstruction :[ { text : 5 mL bid x 10 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-04 }, frequency : 2 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 5 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 10 , unit : days , system : http://unitsofmeasure.org , code : d } } } } ] } } Change Log Version Description 1.0 Initial Release","title":"order-review"},{"location":"hooks/order-review/#order-review","text":"Metadata Value specificationVersion 1.0 hookVersion 1.0","title":"order-review"},{"location":"hooks/order-review/#workflow","text":"The user is in the process of reviewing a set of orders to sign.","title":"Workflow"},{"location":"hooks/order-review/#context","text":"The set of orders being reviewed for signature on-screen. All FHIR resources in this context MUST be based on the same FHIR version. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context orders REQUIRED No object DSTU2 - FHIR Bundle of MedicationOrder, DiagnosticOrder, DeviceUseRequest, ReferralRequest, ProcedureRequest, NutritionOrder, VisionPrescription STU3 - FHIR Bundle of MedicationRequest, ReferralRequest, ProcedureRequest, NutritionOrder, VisionPrescription","title":"Context"},{"location":"hooks/order-review/#example-dstu2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 context : { patientId : 1288992 , encounterId : 89284 , orders :{ resourceType : Bundle , entry :[ { resource :{ resourceType : NutritionOrder , id : nest-patient-1-NUTR1 , patient :{ reference : Patient/1288992 , display : Tomy Francis }, orderer :{ display : Dr Adam Careful }, identifier :[ { system : http://goodhealthhospital.org/nutrition-orders , value : 123 } ], dateTime : 2014-09-17 , status : draft , oralDiet :{ type :[ { coding :[ { system : http://snomed.info/sct , code : 435801000124108 , display : Texture modified diet }, { system : http://goodhealthhospital.org/diet-type-codes , code : 1010 , display : Texture modified diet } ], text : Texture modified diet } ], schedule :[ { repeat :{ boundsPeriod :{ start : 2015-02-10 }, frequency : 3 , period : 1 , periodUnits : d } } ], texture :[ { modifier :{ coding :[ { system : http://snomed.info/sct , code : 228049004 , display : Chopped food } ], text : Regular, Chopped Meat }, foodType :{ coding :[ { system : http://snomed.info/sct , code : 22836000 , display : Vegetable } ], text : Regular, Chopped Meat } } ] } } }, { resource :{ resourceType : MedicationOrder , id : smart-MedicationOrder-103 , status : draft , patient :{ reference : Patient/1288992 , display : Tomy Francis }, medicationCodeableConcept :{ coding :[ { system : http://www.nlm.nih.gov/research/umls/rxnorm , code : 617993 , display : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension } ], text : Amoxicillin 120 MG/ML / clavulanate potassium 8.58 MG/ML Oral Suspension }, dosageInstruction :[ { text : 5 mL bid x 10 days , timing :{ repeat :{ boundsPeriod :{ start : 2005-01-04 }, frequency : 2 , period : 1 , periodUnits : d } }, doseQuantity :{ value : 5 , unit : mL , system : http://unitsofmeasure.org , code : mL } } ], dispenseRequest :{ numberOfRepeatsAllowed : 1 , quantity :{ value : 1 , unit : mL , system : http://unitsofmeasure.org , code : mL }, expectedSupplyDuration :{ value : 10 , unit : days , system : http://unitsofmeasure.org , code : d } } } } ] } }","title":"Example (DSTU2)"},{"location":"hooks/order-review/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"hooks/patient-view/","text":"patient-view Metadata Value specificationVersion 1.0 hookVersion 1.0 Workflow The user has just opened a patient's record. Context The patient whose record was opened, including their encounter, if applicable. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context Examples 1 2 3 context : { patientId : 1288992 } 1 2 3 4 context : { patientId : 1288992 , encounterId : 456 } Change Log Version Description 1.0 Initial Release","title":"patient-view"},{"location":"hooks/patient-view/#patient-view","text":"Metadata Value specificationVersion 1.0 hookVersion 1.0","title":"patient-view"},{"location":"hooks/patient-view/#workflow","text":"The user has just opened a patient's record.","title":"Workflow"},{"location":"hooks/patient-view/#context","text":"The patient whose record was opened, including their encounter, if applicable. Field Optionality Prefetch Token Type Description patientId REQUIRED Yes string The FHIR Patient.id of the current patient in context encounterId OPTIONAL Yes string The FHIR Encounter.id of the current encounter in context","title":"Context"},{"location":"hooks/patient-view/#examples","text":"1 2 3 context : { patientId : 1288992 } 1 2 3 4 context : { patientId : 1288992 , encounterId : 456 }","title":"Examples"},{"location":"hooks/patient-view/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"hooks/template/","text":"hook-name-expressed-as-noun-verb Metadata Value specificationVersion 1.0 hookVersion 1.0 Workflow Describe when this hook occurs in a workflow. Hook creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors. Context Define context values that are available when this hook occurs, and indicate whether they must be provided, and whether they are available for parameterizing prefetch templates. Field Optionality Prefetch Token Type Description exampleId REQUIRED Yes string Describe the context value encounterId OPTIONAL Yes string Describe the context value Examples 1 2 3 context : { patientId : 1288992 } 1 2 3 4 context : { patientId : 1288992 , encounterId : 456 } Change Log Version Description 1.0 Initial Release","title":"new-hook-template"},{"location":"hooks/template/#hook-name-expressed-as-noun-verb","text":"Metadata Value specificationVersion 1.0 hookVersion 1.0","title":"hook-name-expressed-as-noun-verb"},{"location":"hooks/template/#workflow","text":"Describe when this hook occurs in a workflow. Hook creators SHOULD include as much detail and clarity as possible to minimize any ambiguity or confusion amongst implementors.","title":"Workflow"},{"location":"hooks/template/#context","text":"Define context values that are available when this hook occurs, and indicate whether they must be provided, and whether they are available for parameterizing prefetch templates. Field Optionality Prefetch Token Type Description exampleId REQUIRED Yes string Describe the context value encounterId OPTIONAL Yes string Describe the context value","title":"Context"},{"location":"hooks/template/#examples","text":"1 2 3 context : { patientId : 1288992 } 1 2 3 4 context : { patientId : 1288992 , encounterId : 456 }","title":"Examples"},{"location":"hooks/template/#change-log","text":"Version Description 1.0 Initial Release","title":"Change Log"},{"location":"specification/1.0/","text":"CDS Services 1.0 Draft This is the draft of the 1.0 release of the CDS Hooks specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved! Overview The CDS Hooks specification describes the RESTful APIs and interactions between EHRs and CDS Services. All data exchanged through the RESTful APIs MUST BE sent and received as JSON structures, and MUST be transmitted over channels secured using Transport Layer Security (TLS). Conformance Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC2119 . Limitations This specification has the following limitations. The specification provides options for providing a CDS Service access to the EHR's FHIR resources through use of either prefetch and/or a bearer access token to be presented to the FHIR Server. Decisions regarding which approach to take, and details regarding how the choice is implemented, are left up to the EHR vendor/provider, as architectural considerations will come into play. The specification requires that each CDS Service provider be registered (client_id, key-pair identifier) with the EHR Authorization Server, but does not dictate how registration is accomplished (e.g., dynamic vs. manual). The specification acknowledges that each EHR vendor/provider will need to vet CDS Service providers and suggests that vendors/providers may want to create a \"white list\" of providers deemed \"safe\" and/or a \"black list\" of providers deemed \"unsafe.\" Similarly, an EHR vendor/provider may choose to assess the safety of active links embedded in CDS Hooks Cards returned to the EHR. The specification does not suggest how such vetting is accomplished nor suggest factors to consider, as these judgments are dependent upon each EHR vendor's or provider's existing vetting processes and risk-management policy. Swagger (Open API Specification) The CDS Hooks specification is available as an Open API Specification using Swagger. You can download the API specification and view it online via the Swagger Editor . Discovery Developers of CDS Services SHALL provide a stable endpoint for allowing EHRs to discover available CDS Services, including information such as the purpose of the CDS Service, when it should be invoked, and any data that is requested to be prefetched. A CDS Service provider SHALL expose its Discovery endpoint at\" 1 { baseURL } /cds-services HTTP Request The discovery endpoint is always available at {baseUrl}/cds-services . For example, if the baseUrl is https://example.com, the EHR would invoke: GET https://example.com/cds-services Response The response to the discovery endpoint is an object containing a list of CDS Services. Field Description services array . An array of CDS Services Each CDS Service is described by the following attributes. Field Optionality Type Description hook REQUIRED string The hook this service should be invoked on. See Hook Catalog title RECOMMENDED string The human-friendly name of this service description REQUIRED string The description of this service id REQUIRED string The {id} portion of the URL to this service which is available at {baseUrl}/cds-services/{id} prefetch OPTIONAL object An object containing key/value pairs of FHIR queries that this service is requesting that the EHR prefetch and provide on each service call. The key is a string that describes the type of data being requested and the value is a string representing the FHIR query. See Prefetch Template . HTTP Status Codes Code Description 200 OK A successful response Discovery Example 1 curl https://example.com/cds-services The above command returns JSON structured like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { services : [ { hook : patient-view , title : Static CDS Service Example , description : An example of a CDS Service that returns a static set of cards , id : static-patient-greeter , prefetch : { patientToGreet : Patient/{{context.patientId}} } }, { hook : medication-prescribe , title : Medication Echo CDS Service , description : An example of a CDS Service that simply echos the medication being prescribed , id : medication-echo , prefetch : { patient : Patient/{{context.patientId}} , medications : MedicationOrder?patient={{context.patientId}} } } ] } Calling a CDS Service HTTP Request An EHR calls a CDS service by POST ing a JSON document to the service endpoint, which can be constructed from the CDS Service base URL and an individual service id as {baseUrl}/cds-services/{service.id} . The CDS Hook call includes a JSON POST body with the following input fields: Field Optionality Type Description hook REQUIRED string The hook that triggered this CDS Service call (todo: link to hook documentation) hookInstance REQUIRED string A UUID for this particular hook call (see more information below) fhirServer OPTIONAL URL The base URL EHR's FHIR server. If fhirAuthorization is provided, this field is REQUIRED. The scheme should be https fhirAuthorization OPTIONAL object A structure holding an OAuth 2.0 bearer access token granting the CDS Service access to FHIR resources, along with supplemental information relating to the token. See the FHIR Resource Access section for more information. user REQUIRED string The FHIR resource type + id representing the current user. The type is one of: Practitioner , Patient , or RelatedPerson . For example, Practitioner/123 context REQUIRED object Hook-specific contextual data that the CDS service will need. For example, with the medication-prescribe hook this will include MedicationOrder being prescribed. For details, see the Hooks specification . prefetch OPTIONAL object The FHIR data that was prefetched by the EHR (see more information below) hookInstance While working in the EHR, a user can perform multiple actions in series or in parallel. For example, a clinician might prescribe two drugs in a row; each prescription action would be assigned a unique hookInstance . This allows a CDS Service to uniquely identify each hook invocation. Note: the hookInstance is globally unique and should contain enough entropy to be un-guessable. Example 1 2 3 4 5 curl -X POST \\ -H Content-type: application/json \\ --data @hook-details-see-example-below https://example.com/cds-services/static-patient-greeter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://hooks.smarthealthit.org:9080 , hook : patient-view , fhirAuthorization : { access_token : some-opaque-fhir-access-token , token_type : Bearer , expires_in : 300 , scope : patient/Patient.read patient/Observation.read , subject : cds-service4 }, user : Practitioner/example , context : { patientId : 1288992 , encounterId : 89284 }, prefetch : { patientToGreet : { resourceType : Patient , gender : male , birthDate : 1925-12-23 , id : 1288992 , active : true } } } Providing FHIR Resources to a CDS Service Each CDS Service will require specific FHIR resources in order to compute the recommendations the EHR requests. If real-world performance were no issue, an EHR could launch a CDS Service passing only context data, and the CDS Service could then request authorization for FHIR resources as they were needed, and then retrieve the resources from the EHR's FHIR server. However, CDS Services must respond quickly (on the order of 500 ms.), and so we provide performance enhancements that allow a CDS Service to request and obtain FHIR resources more efficiently. Regardless of the method used to provide FHIR resources to a CDS Service, the EHR must assure that clinical data provided to the CDS Service are the most current data available to the EHR user. Decisions based on stale clinical data pose a safety threat to the patient and must be avoided. Two optional enhancements are provided. First, FHIR resources may be obtained by passing \"prefetched\" data from the EHR to the CDS Service in the service call. FHIR resources requested in the CDS Service desciption are passed as key-value pairs, with each key matching a key described in the CDS Service description, and each value being a FHIR resource. If data are to be prefetched, the CDS Service registers a set of \"prefetch templates\" with the EHR, as described in the Prefetch Template section below. The second enhancement enables the CDS Service to retrieve FHIR resources for itself, but to do so more efficiently than if it were required to request and obtain its own authorization. If the EHR decides to have the CDS Service fetch its own FHIR resources, the EHR obtains and passes directly to the CDS Service a bearer token issued for the CDS Service's use in executing FHIR API calls against the EHR FHIR server to obtain the required resources. Some EHRs may choose to pass prefetched data, along with a bearer token for the CDS Service to use if additional resources are required. Each EHR may decide which approach, or combination, is preferred, based on performance considerations and assessment of attendant security and safety risks. For more detail, see the FHIR Resource Access section below. Similarly, each EHR will decide what FHIR resources to authorize and to prefetch, based on the CDS Service description's \"prefetch\" request and on the provider's assessment of the \"minimum necessary.\" The EHR provider and the CDS Service provider will negotiate the set of FHIR resources to be provided, and how these data will be provided, as part of their service agreement. Prefetch Template The prefetch template is a dictionary of read and search requests to supply relevant data. In order to allow for prefetch templates that are dependent upon the particular CDS Service request, prefetch tokens or variables may be defined. Prefetch tokens MUST be delimited by {{ and }} , MUST be named based upon the field they correspond to, and MUST have a primitive value. The CDS Hooks specification defines just one prefetch token: Variable Meaning {{user}} The value of the user field from this CDS Service request (e.g. Practitioner/123 ) Individual hooks specify which of their context fields can be used as prefetch tokens. Only root-level fields with a primitive value within the context object are eligible to be used as prefetch tokens. For instance, given a hook of example-hook with the following context in which the patientId and medicationId fields are both denoted as prefix tokens: 1 2 3 4 5 6 7 8 9 10 context : { patientId : 123 , medicationId : 456 , medication : { id : 456 , code : { ... // FHIR CodeableConcept } } } The prefetch tokens defined by this example-hook would be {{context.patientId}} and {{context.medicationId}} . Note that the context.medication.id field is not eligible to be a prefetch token as it is not a root-level field of the context object. An EHR MAY choose to honor some or all of the desired prefetch templates, and is free to choose the most appropriate source for these data. For example: The EHR may have some of the desired prefetched data already in memory, thereby removing the need for any network call The EHR may compute an efficient set of prefetch templates from multiple CDS Services, thereby reducing the number of network calls to a minimum The EHR may satisfy some of the desired prefetched templates via some internal service or even its own FHIR server The EHR may deny access because the requested resource is outside the user's authorized context. Regardless of how the EHR satisfies the prefetch templates (if at all), the prefetched data given to the CDS Service MUST BE equivalent to the data the CDS Service would receive if it were making its own call to the EHR FHIR server using the parameterized prefetch template. The resulting response, which MUST BE rendered in a single page \u2014 no \"next page\" links allowed \u2014 is passed along to the CDS Service using the prefetch parameter (see below for a complete example). The CDS Service MUST NOT receive any prefetch template key that the EHR chooses not to satisfy; in which case the prefetch template key SHOULD NOT be sent. Similarly, if the EHR encounters an error while prefetching any data, the prefetch template key SHOULD NOT be sent to the CDS Service. If the EHR has no data to populate a template prefetch key, the prefetch template key MUST have a value of null . It is the CDS Service's responsibility to check prefetched data against its template to determine what requests were satisfied (if any) and to manually retrieve any additional necessary data. If the CDS Service is unable to obtain required data because it cannot access the FHIR server and the request did not contain the necessary prefetch keys, the service SHALL respond with an HTTP 412 Precondition Failed status code. Example prefetch templates 1 2 3 4 5 6 7 { prefetch : { p : Patient/{{context.patientId}} , a1c : Observation?patient={{context.patientId}} code=4548-4 _count=1 sort:desc=date , u : Practitioner/{{user}} } } Here is an example prefetch field from a CDS Service discovery endpoint. The goal is to know, at call time: Key Description p Patient demographics a1c Most recent Hemoglobin A1c reading for this patient u Information on the current user (Practitioner) Example prefetch response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { prefetch : { p :{ resourceType : Patient , gender : male , birthDate : 1974-12-25 , ... : snipped for brevity }, a1c : { resourceType : Bundle , type : searchset , entry : [{ resource : { resourceType : Observation , code : { coding : [{ system : http://loinc.org , code : 4548-4 , display : Hemoglobin A1c }] }, ... : snipped for brevity } }] } } } The response is augmented to include two prefetch values, where the dictionary keys match the request keys ( p and a1c in this case). Note that the missing u key indicates that either the EHR has decided not to satisfy this particular prefetch template or it was not able to retrieve this prefetched data. The CDS Service is responsible for retrieving this Practitioner data from the FHIR server (if required). Prefetch query restrictions To reduce the implementation burden on EHRs that support CDS Services, CDS Hooks recommends that prefetch queries only use a subset of the full functionality available in the FHIR specification. Valid prefetch URLs should only contain: instance level read interactions (for resources with known ids such as Patient and Practitioner ) type level search interactions Patient references (e.g. patient={{context.patientId}} ) token search parameters using equality (e.g. code=4548-4 ) and optionally the :in modifier (no other modifiers for token parameters) date search parameters on date , dateTime , instant , or Period types only, and using only the prefixes eq , lt , gt , ge , le the _count parameter to limit the number of results returned the _sort parameter to allow for most recent and first queries FHIR Resource Access The CDS Service is able to use the EHR's FHIR server to obtain any FHIR resources it requires beyond those provided by the EHR as prefetched data. This is similar to the approach used by SMART on FHIR wherein the SMART app requests and ultimately obtains an access token from the EHR's Authorization server using the SMART launch workflow, as described in SMART App Authorization Guide . Like SMART on FHIR, CDS Hooks requires that clients present a valid access token to the FHIR server with each API call. Thus, a CDS Service must be able to obtain an access token before communicating with the EHR's FHIR resource server. While CDS Hooks shares the underlying technical framework and standards as SMART on FHIR, the CDS Hooks workflow must accommodate the automated, low-latency delivery of an access token to the CDS service. With CDS Hooks, if the EHR wants to provide the CDS Service direct access to FHIR resources, the EHR creates an access token prior to invoking the CDS Service, passing this token to the CDS Service as part of the service call. This approach remains compatible with OAuth 2.0's bearer token protocol while minimizing the number of HTTPS round-trips and the service invocation latency. The EHR remains in control of creating an access token that is associated with the specific CDS Service, user, and context of the invocation. As the CDS Service executes on behalf of a user, the data to which the CDS Service is given access MUST BE limited to the same restrictions and authorizations afforded the current user. As such, the access token SHALL BE scoped to: The CDS Service being invoked The current user Passing the Access Token to the CDS Service The access token is specified in the CDS Service request via the OPTIONAL fhirAuthorization request parameter. This parameter is an object that contains both the access token as well as other related information. If the EHR chooses not to pass along an access token, the fhirAuthorization parameter is omitted. Field Optionality Type Description access_token REQUIRED string This is the OAuth 2 access token that provides access to the FHIR server. token_type REQUIRED string Fixed value: Bearer . expires_in REQUIRED integer The lifetime in seconds of the access token. scope REQUIRED string The scopes the access token grants the CDS Service. subject REQUIRED string The OAuth 2.0 client identifier of the CDS Service, as registered with the EHR's authorization server. The scopes granted to the CDS Service via the scope field are defined by the SMART on FHIR specification . The expires_in value is established by the authorization server and SHOULD BE very short lived, as the access token must be treated as a transient value by the CDS Service. Below is an example fhirAuthorization parameter: 1 2 3 4 5 6 7 8 9 { fhirAuthorization : { access_token : some-opaque-fhir-access-token , token_type : Bearer , expires_in : 300 , scope : patient/Patient.read patient/Observation.read , subject : cds-service4 } } CDS Service Response Card Array Field Optionality Type Description cards REQUIRED array An array of Cards . Cards can provide a combination of information (for reading), suggested actions (to be applied if a user selects them), and links (to launch an app if the user selects them). The EHR decides how to display cards, but we recommend displaying suggestions using buttons, and links using underlined text. If your CDS Service has no decision support for the user, your service should return a 200 HTTP response with an empty array of cards. Response when no decision support is necessary for the user 1 2 3 { cards : [] } Card Attributes Each Card is described by the following attributes. Field Optionality Type Description summary REQUIRED string One-sentence, 140-character summary message for display to the user inside of this card. detail OPTIONAL string Optional detailed information to display; if provided MUST BE represented in (GitHub Flavored) Markdown without HTML. (For non-urgent cards, the EHR MAY hide these details until the user clicks a link like \"view more details...\".) indicator REQUIRED string Urgency/importance of what this card conveys. Allowed values, in order of increasing urgency, are: info , warning , hard-stop . The EHR MAY use this field to help make UI display decisions such as sort order or coloring. The value hard-stop indicates that the workflow should not be allowed to proceed. source REQUIRED object Grouping structure for the Source of the information displayed on this card. The source should be the primary source of guidance for the decision support the card represents. suggestions OPTIONAL array of Suggestions Allows a service to suggest a set of changes in the context of the current activity (e.g. changing the dose of the medication currently being prescribed, for the medication-prescribe activity). If used, the user MUST BE allowed to choose no more than one suggestion. links OPTIONAL array of Links Allows a service to suggest a link to an app that the user might want to run for additional information or to help guide a decision. Source The Source is described by the following attributes. Field Optionality Type Description label REQUIRED string A short, human-readable label to display for the source of the information displayed on this card. If a url is also specified, this may be the text for the hyperlink. url OPTIONAL URL An optional absolute URL to load (via GET , in a browser context) when a user clicks on this link to learn more about the organization or data set that provided the information on this card. Note that this URL should not be used to supply a context-specific \"drill-down\" view of the information on this card. For that, use link.url instead. icon OPTIONAL URL An optional absolute URL to an icon for the source of this card. The icon returned by this URL should be in PNG format, an image size of 100x100 pixels, and must not include any transparent regions. Suggestion Each Suggestion is described by the following attributes. Field Optionality Type Description label REQUIRED string Human-readable label to display for this suggestion (e.g. the EHR might render this as the text on a button tied to this suggestion). uuid OPTIONAL string Unique identifier for this suggestion. For details see Suggestion Tracking Analytics actions OPTIONAL array Array of objects, each defining a suggested action. Within a suggestion, all actions are logically AND'd together, such that a user selecting a suggestion selects all of the actions within it. Suggestion Tracking Analytics Whenever a user clicks a displayed label (e.g., button) from a \"suggestion\" card, the EHR uses the suggestion uuid to notify the CDS Service's analytics endpoint via a POST with an empty body: 1 `POST {baseUrl}/cds-services/{serviceId}/analytics/{uuid}` If a suggestion has no uuid , the EHR does not send a notification. Action Each Action is described by the following attributes. Field Optionality Type Description type REQUIRED string The type of action being performed. Allowed values are: create , update , delete . description REQUIRED string Human-readable description of the suggested action. May be presented to the end-user. resource OPTIONAL object Depending upon the type attribute, a new resource or the id of a resource. For a type of create , the resource attribute contains a new FHIR resource to apply within the current activity (e.g. for medication-prescribe , this holds the updated prescription as proposed by the suggestion). For delete , this is the id of any resource to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove an order from the pending list). In activities like medication-prescribe where only one \"content\" resource is ever relevant, this field may be omitted. For update , this holds the updated resource to modify from the current activity (e.g. for the order-review activity, this would provide a way to annotate an order from the pending list with an assessment). Link Each Link is described by the following attributes. Field Optionality Type Description label REQUIRED string Human-readable label to display for this link (e.g. the EHR might render this as the underlined text of a clickable link). url REQUIRED URL URL to load (via GET , in a browser context) when a user clicks on this link. Note that this may be a \"deep link\" with context embedded in path segments, query parameters, or a hash. type REQUIRED string The type of the given URL. There are two possible values for this field. A type of absolute indicates that the URL is absolute and should be treated as-is. A type of smart indicates that the URL is a SMART app launch URL and the EHR should ensure the SMART app launch URL is populated with the appropriate SMART launch parameters. appContext OPTIONAL string An optional field that allows the CDS Service to pass context regarding the launch of this SMART app from the CDS card to the SMART app. The appContext field should only be valued if the link type is smart and is not valid for absolute links. The appContext field and value will be sent to the SMART app as part of the OAuth 2 access token response, alongside the other launch context when the SMART app is launched. Example Example response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { cards : [ { summary : Example Card , indicator : info , detail : This is an example card. , source : { label : Static CDS Service Example , url : https://example.com , icon : https://example.com/img/icon-100px.png }, links : [ { label : Google , url : https://google.com , type : absolute }, { label : Github , url : https://github.com , type : absolute }, { label : SMART Example App , url : https://smart.example.com/launch , type : smart , appContext : module-123 } ] }, { summary : Another card , indicator : warning , source : { label : Static CDS Service Example } } ] } Security and Safety Security and safety risks associated with the CDS Hooks API include: The risk that confidential information and privileged authorizations transmitted between an EHR and a CDS Service could be surreptitiously intercepted by an attacker; The risk that an attacker masquerading as a legitimate CDS Service could receive confidential information or privileged authorizations from an EHR, or could provide to an EHR decision support recommendations that could be harmful to a patient; The risk that an attacker masquerading as a legitimate service-subscribing EHR (i.e., man-in-the-middle) could intercept and possibly alter data exchanged between the two parties. The risk that a CDS Service could embed dangerous suggestions or links to dangerous apps in Cards returned to an EHR. The risk that a CDS Hooks browser-based deployment could be victimized by a Cross-Origin Resource Sharing (CORS) attack. The risk that a CDS Service could return a decision based on outdated patient data, resulting in a safety risk to the patient. CDS Hooks defines a security model that addresses these risks by assuring that the identities of both the CDS Service and the EHR are authenticated to each other; by protecting confidential information and privileged authorizations shared between an EHR and a CDS Service; by recommending means of assuring data freshness; and by incorporating business mechanisms through which trust is established and maintained between an EHR and a CDS Service. Trusting CDS Services Prior to enabling EHRs to request decision support from any CDS Service, the EHR vendor and/or provider organization is expected to perform due diligence on the CDS Service provider. Each EHR vendor/provider is individually responsible for determining the suitability, safety and integrity of the CDS Services it uses, based on the organization's own risk-management strategy. Each EHR vendor/provider SHOULD maintain a \"white list\" (and/or \"black list\") of the CDS Services it has vetted, and the Card links that have been deemed safe to display from within the EHR context. Each provider organization is expected to work with its EHR vendor to choose what CDS Services to allow and to negotiate the conditions under which the CDS Services may be called. Once a CDS Service provider is selected, the EHR vendor/provider negotiates the terms under which service will be provided. This negotiation includes agreement on patient data elements that will be prefetched and provided to the CDS Service, data elements that will be made available through an access token passed by the EHR, and steps the CDS Service must take to protect patient data and access tokens. To enable the EHR authorization server to authorize CDS Service access to FHIR resources, the CDS Service is registered as a client to the EHR authorization server. These business arrangements are documented in the service agreement. Every interaction between an EHR and a CDS Service is initiated by the EHR sending a service request to a CDS Service endpoint protected using the Transport Layer Security protocol . Through the TLS protocol the identity of the CDS Service is authenticated, and an encrypted transmission channel is established between the EHR and the CDS Service. Both the Discovery endpoint and individual CDS Service endpoints are TLS secured. The EHR\u2019s authorization server is responsible for enforcing restrictions on the CDS Services that may be called and the scope of the FHIR resources that may be prefetched or retrieved from the FHIR server. Therefore, all CDS Services to be called from within an EHR system MUST BE pre-registered with the authorization server of that EHR. Pre-registration MUST include registering a CDS client identifier, and agreeing upon the scope of FHIR access that is minimally necessary to provide the clinical decision support required. Trusting EHRs The service agreement negotiated between the EHR vendor/provider and the CDS Service provider will include obligations the EHR vendor/provider commits to the CDS Service provider. Some agreements may include the use of mutual TLS, in which both ends of the channel are authenticated. However, mutual TLS is impractical for many organizations, and because the EHR initiates the TLS channel set-up, only the CDS Service endpoint will be authenticated. To enable the CDS Service to authenticate the identity of the EHR, CDS Hooks uses digitally signed JSON web tokens (JWT) . Each time an EHR transmits a request to a CDS Service, the request MUST include an Authorization header presenting the JWT as a \u201cBearer\u201d token: 1 Authorization: Bearer {{JWT}} Note that this is for every single CDS Service call, whether that be a Discovery call, a single CDS Service invocation, or multiple exchanges relating to a single service. Also note that mutual TLS MAY be used alongside JSON web tokens to establish trust of the EHR by the CDS Service. The EHR MUST use its private key to digitally sign the JWT, using the JSON Web Signatures (rfc7515) standard. The JWT header contains the following fields (see rfc7515 section 4.1 for further information on these standard headers): Field Optionality Type Value alg REQUIRED string The cryptographic algorithm used to sign this JWT. kid REQUIRED string The identifier of the key-pair used to sign this JWT. This identifier MUST be unique within the EHR's JWK Set. typ REQUIRED string Fixed value: JWT . jku OPTIONAL url The URL to the JWK Set containing the public key(s). The JWT payload contains the following fields: Field Optionality Type Value iss REQUIRED string The URI of the issuer of this JWT. Note that the JWT may be self-issued by the EHR, or may be issued by a third-party identity provider. sub REQUIRED string Client_id of the EHR. aud REQUIRED string or array of string The CDS Service endpoint that is being called by the EHR. (See more details below). exp REQUIRED number Expiration time integer for this authentication JWT, expressed in seconds since the \"Epoch\" (1970-01-01T00:00:00Z UTC). iat REQUIRED number The time at which this JWT was issued, expressed in seconds since the \"Epoch\" (1970-01-01T00:00:00Z UTC). jti REQUIRED string A nonce string value that uniquely identifies this authentication JWT (used to protect against replay attacks) CDS Services SHOULD whitelist the iss , jku and sub fields to only the EHRs they trust. Per rfc7519 , the aud value is either a string or an array of strings. For CDS Hooks, this value MUST BE the URL of the CDS Service endpoint being invoked. For example, consider a CDS Service available at a base URL of https://cds.example.org . When the EHR invokes the CDS Service discovery endpoint, the aud value is either \"https://cds.example.org/cds-services\" or [\"https://cds.example.org/cds-services\"] . Similarly, when the EHR invokes a particular CDS Service (say, some-service ), the aud value is either \"https://cds.example.org/cds-services/some-service\" or [\"https://cds.example.org/cds-services/some-service\"] . The EHR MUST make its public key, expressed as a JSON Web Key (JWK) in a JWK Set, as defined by rfc7517 . The kid value from the JWT header allows a CDS Service to identify the correct JWK in the JWK Set that can be used to verify the signature. The EHR MAY make its JWK Set available via a URL identified by the jku header field, as defined by rfc7515 4.1.2 . If the jku header field is ommitted, the EHR and CDS Service SHALL communicate the JWK Set out-of-band. An example JSON web token header and payload: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { alg : ES384 , typ : JWT , kid : example-kid , jku : https://fhir-ehr.example.com/jwk_uri } { iss : https://fhir-ehr.example.com/ , sub : client_id , aud : https://cds.example.org/cds-services/some-service , exp : 1422568860 , iat : 1311280970 , jti : ee22b021-e1b7-4611-ba5b-8eec6a33ac1e } Using the above JWT payload, the complete JWT as passed in the Authorization HTTP header would be: 1 Authorization: Bearer eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6ImV4YW1wbGUta2lkIiwiamt1IjoiaHR0cHM6Ly9maGlyLWVoci5leGFtcGxlLmNvbS9qd2tfdXJpIn0.eyJpc3MiOiJodHRwczovL2ZoaXItZWhyLmV4YW1wbGUuY29tLyIsInN1YiI6ImNsaWVudF9pZCIsImF1ZCI6Imh0dHBzOi8vY2RzLmV4YW1wbGUub3JnL2Nkcy1zZXJ2aWNlcy9zb21lLXNlcnZpY2UiLCJleHAiOjE0MjI1Njg4NjAsImlhdCI6MTMxMTI4MDk3MCwianRpIjoiZWUyMmIwMjEtZTFiNy00NjExLWJhNWItOGVlYzZhMzNhYzFlIn0.230VxOubItskK-HCzdfjR5Y76nEydquQoqK-JDHbl8y8wzo-7HJetYpY1R4rytp_yJJCc8DULX9G5llPKx6opQ Cross-Origin Resource Sharing Cross-origin resource sharing (CORS) is a W3C standard mechanism that uses additional HTTP headers to enable a web browser to gain permission to access resources from an Internet domain different from that from which the browser is currently accessing. CORS is a client-side security mechanism with well-documented security risks. CDS Services and browser-based EHRs will require CORS support. A secure implementation guide for CORS is outside of the scope of this CDS Hooks specification. Organizations planning to implement CDS Hooks with CORS support are referred to the Cross-Origin Resource Sharing section of the OWASP HTML5 Security Cheat Sheet . Extensions The specification is not prescriptive about support for extensions. However, to support extensions, the specification reserves the name extension and will never define an element with that name, allowing implementations to use it to provide custom behavior and information. The value of an extension element should be a pre-coordinated JSON object. For example, an extension on a request could look like this: 1 2 3 4 5 6 7 8 9 10 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.org:9080 , hook : patient-view , user : Practitioner/example , extension : { com.example.timestamp : 2017-11-27T22:13:25Z , myextension-practitionerspecialty : gastroenterology } } As another example, an extension defined on the discovery response could look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { services : [ { title : Example CDS Service Discovery , hook : patient-view , id : patientview , prefetch : { patient : Patient/{{context.patientId}} }, description : clinical decision support for patient view , extension : { example-client-conformance : http://hooks.example.org/fhir/102/Conformance/patientview } } ] }","title":"1.0"},{"location":"specification/1.0/#cds-services","text":"1.0 Draft This is the draft of the 1.0 release of the CDS Hooks specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our current issue list and get involved!","title":"CDS Services"},{"location":"specification/1.0/#overview","text":"The CDS Hooks specification describes the RESTful APIs and interactions between EHRs and CDS Services. All data exchanged through the RESTful APIs MUST BE sent and received as JSON structures, and MUST be transmitted over channels secured using Transport Layer Security (TLS).","title":"Overview"},{"location":"specification/1.0/#conformance-language","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC2119 .","title":"Conformance Language"},{"location":"specification/1.0/#limitations","text":"This specification has the following limitations. The specification provides options for providing a CDS Service access to the EHR's FHIR resources through use of either prefetch and/or a bearer access token to be presented to the FHIR Server. Decisions regarding which approach to take, and details regarding how the choice is implemented, are left up to the EHR vendor/provider, as architectural considerations will come into play. The specification requires that each CDS Service provider be registered (client_id, key-pair identifier) with the EHR Authorization Server, but does not dictate how registration is accomplished (e.g., dynamic vs. manual). The specification acknowledges that each EHR vendor/provider will need to vet CDS Service providers and suggests that vendors/providers may want to create a \"white list\" of providers deemed \"safe\" and/or a \"black list\" of providers deemed \"unsafe.\" Similarly, an EHR vendor/provider may choose to assess the safety of active links embedded in CDS Hooks Cards returned to the EHR. The specification does not suggest how such vetting is accomplished nor suggest factors to consider, as these judgments are dependent upon each EHR vendor's or provider's existing vetting processes and risk-management policy.","title":"Limitations"},{"location":"specification/1.0/#swagger-open-api-specification","text":"The CDS Hooks specification is available as an Open API Specification using Swagger. You can download the API specification and view it online via the Swagger Editor .","title":"Swagger (Open API Specification)"},{"location":"specification/1.0/#discovery","text":"Developers of CDS Services SHALL provide a stable endpoint for allowing EHRs to discover available CDS Services, including information such as the purpose of the CDS Service, when it should be invoked, and any data that is requested to be prefetched. A CDS Service provider SHALL expose its Discovery endpoint at\" 1 { baseURL } /cds-services","title":"Discovery"},{"location":"specification/1.0/#http-request","text":"The discovery endpoint is always available at {baseUrl}/cds-services . For example, if the baseUrl is https://example.com, the EHR would invoke: GET https://example.com/cds-services","title":"HTTP Request"},{"location":"specification/1.0/#response","text":"The response to the discovery endpoint is an object containing a list of CDS Services. Field Description services array . An array of CDS Services Each CDS Service is described by the following attributes. Field Optionality Type Description hook REQUIRED string The hook this service should be invoked on. See Hook Catalog title RECOMMENDED string The human-friendly name of this service description REQUIRED string The description of this service id REQUIRED string The {id} portion of the URL to this service which is available at {baseUrl}/cds-services/{id} prefetch OPTIONAL object An object containing key/value pairs of FHIR queries that this service is requesting that the EHR prefetch and provide on each service call. The key is a string that describes the type of data being requested and the value is a string representing the FHIR query. See Prefetch Template .","title":"Response"},{"location":"specification/1.0/#http-status-codes","text":"Code Description 200 OK A successful response","title":"HTTP Status Codes"},{"location":"specification/1.0/#discovery-example","text":"1 curl https://example.com/cds-services The above command returns JSON structured like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { services : [ { hook : patient-view , title : Static CDS Service Example , description : An example of a CDS Service that returns a static set of cards , id : static-patient-greeter , prefetch : { patientToGreet : Patient/{{context.patientId}} } }, { hook : medication-prescribe , title : Medication Echo CDS Service , description : An example of a CDS Service that simply echos the medication being prescribed , id : medication-echo , prefetch : { patient : Patient/{{context.patientId}} , medications : MedicationOrder?patient={{context.patientId}} } } ] }","title":"Discovery Example"},{"location":"specification/1.0/#calling-a-cds-service","text":"","title":"Calling a CDS Service"},{"location":"specification/1.0/#http-request_1","text":"An EHR calls a CDS service by POST ing a JSON document to the service endpoint, which can be constructed from the CDS Service base URL and an individual service id as {baseUrl}/cds-services/{service.id} . The CDS Hook call includes a JSON POST body with the following input fields: Field Optionality Type Description hook REQUIRED string The hook that triggered this CDS Service call (todo: link to hook documentation) hookInstance REQUIRED string A UUID for this particular hook call (see more information below) fhirServer OPTIONAL URL The base URL EHR's FHIR server. If fhirAuthorization is provided, this field is REQUIRED. The scheme should be https fhirAuthorization OPTIONAL object A structure holding an OAuth 2.0 bearer access token granting the CDS Service access to FHIR resources, along with supplemental information relating to the token. See the FHIR Resource Access section for more information. user REQUIRED string The FHIR resource type + id representing the current user. The type is one of: Practitioner , Patient , or RelatedPerson . For example, Practitioner/123 context REQUIRED object Hook-specific contextual data that the CDS service will need. For example, with the medication-prescribe hook this will include MedicationOrder being prescribed. For details, see the Hooks specification . prefetch OPTIONAL object The FHIR data that was prefetched by the EHR (see more information below)","title":"HTTP Request"},{"location":"specification/1.0/#hookinstance","text":"While working in the EHR, a user can perform multiple actions in series or in parallel. For example, a clinician might prescribe two drugs in a row; each prescription action would be assigned a unique hookInstance . This allows a CDS Service to uniquely identify each hook invocation. Note: the hookInstance is globally unique and should contain enough entropy to be un-guessable.","title":"hookInstance"},{"location":"specification/1.0/#example","text":"1 2 3 4 5 curl -X POST \\ -H Content-type: application/json \\ --data @hook-details-see-example-below https://example.com/cds-services/static-patient-greeter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://hooks.smarthealthit.org:9080 , hook : patient-view , fhirAuthorization : { access_token : some-opaque-fhir-access-token , token_type : Bearer , expires_in : 300 , scope : patient/Patient.read patient/Observation.read , subject : cds-service4 }, user : Practitioner/example , context : { patientId : 1288992 , encounterId : 89284 }, prefetch : { patientToGreet : { resourceType : Patient , gender : male , birthDate : 1925-12-23 , id : 1288992 , active : true } } }","title":"Example"},{"location":"specification/1.0/#providing-fhir-resources-to-a-cds-service","text":"Each CDS Service will require specific FHIR resources in order to compute the recommendations the EHR requests. If real-world performance were no issue, an EHR could launch a CDS Service passing only context data, and the CDS Service could then request authorization for FHIR resources as they were needed, and then retrieve the resources from the EHR's FHIR server. However, CDS Services must respond quickly (on the order of 500 ms.), and so we provide performance enhancements that allow a CDS Service to request and obtain FHIR resources more efficiently. Regardless of the method used to provide FHIR resources to a CDS Service, the EHR must assure that clinical data provided to the CDS Service are the most current data available to the EHR user. Decisions based on stale clinical data pose a safety threat to the patient and must be avoided. Two optional enhancements are provided. First, FHIR resources may be obtained by passing \"prefetched\" data from the EHR to the CDS Service in the service call. FHIR resources requested in the CDS Service desciption are passed as key-value pairs, with each key matching a key described in the CDS Service description, and each value being a FHIR resource. If data are to be prefetched, the CDS Service registers a set of \"prefetch templates\" with the EHR, as described in the Prefetch Template section below. The second enhancement enables the CDS Service to retrieve FHIR resources for itself, but to do so more efficiently than if it were required to request and obtain its own authorization. If the EHR decides to have the CDS Service fetch its own FHIR resources, the EHR obtains and passes directly to the CDS Service a bearer token issued for the CDS Service's use in executing FHIR API calls against the EHR FHIR server to obtain the required resources. Some EHRs may choose to pass prefetched data, along with a bearer token for the CDS Service to use if additional resources are required. Each EHR may decide which approach, or combination, is preferred, based on performance considerations and assessment of attendant security and safety risks. For more detail, see the FHIR Resource Access section below. Similarly, each EHR will decide what FHIR resources to authorize and to prefetch, based on the CDS Service description's \"prefetch\" request and on the provider's assessment of the \"minimum necessary.\" The EHR provider and the CDS Service provider will negotiate the set of FHIR resources to be provided, and how these data will be provided, as part of their service agreement.","title":"Providing FHIR Resources to a CDS Service"},{"location":"specification/1.0/#prefetch-template","text":"The prefetch template is a dictionary of read and search requests to supply relevant data. In order to allow for prefetch templates that are dependent upon the particular CDS Service request, prefetch tokens or variables may be defined. Prefetch tokens MUST be delimited by {{ and }} , MUST be named based upon the field they correspond to, and MUST have a primitive value. The CDS Hooks specification defines just one prefetch token: Variable Meaning {{user}} The value of the user field from this CDS Service request (e.g. Practitioner/123 ) Individual hooks specify which of their context fields can be used as prefetch tokens. Only root-level fields with a primitive value within the context object are eligible to be used as prefetch tokens. For instance, given a hook of example-hook with the following context in which the patientId and medicationId fields are both denoted as prefix tokens: 1 2 3 4 5 6 7 8 9 10 context : { patientId : 123 , medicationId : 456 , medication : { id : 456 , code : { ... // FHIR CodeableConcept } } } The prefetch tokens defined by this example-hook would be {{context.patientId}} and {{context.medicationId}} . Note that the context.medication.id field is not eligible to be a prefetch token as it is not a root-level field of the context object. An EHR MAY choose to honor some or all of the desired prefetch templates, and is free to choose the most appropriate source for these data. For example: The EHR may have some of the desired prefetched data already in memory, thereby removing the need for any network call The EHR may compute an efficient set of prefetch templates from multiple CDS Services, thereby reducing the number of network calls to a minimum The EHR may satisfy some of the desired prefetched templates via some internal service or even its own FHIR server The EHR may deny access because the requested resource is outside the user's authorized context. Regardless of how the EHR satisfies the prefetch templates (if at all), the prefetched data given to the CDS Service MUST BE equivalent to the data the CDS Service would receive if it were making its own call to the EHR FHIR server using the parameterized prefetch template. The resulting response, which MUST BE rendered in a single page \u2014 no \"next page\" links allowed \u2014 is passed along to the CDS Service using the prefetch parameter (see below for a complete example). The CDS Service MUST NOT receive any prefetch template key that the EHR chooses not to satisfy; in which case the prefetch template key SHOULD NOT be sent. Similarly, if the EHR encounters an error while prefetching any data, the prefetch template key SHOULD NOT be sent to the CDS Service. If the EHR has no data to populate a template prefetch key, the prefetch template key MUST have a value of null . It is the CDS Service's responsibility to check prefetched data against its template to determine what requests were satisfied (if any) and to manually retrieve any additional necessary data. If the CDS Service is unable to obtain required data because it cannot access the FHIR server and the request did not contain the necessary prefetch keys, the service SHALL respond with an HTTP 412 Precondition Failed status code.","title":"Prefetch Template"},{"location":"specification/1.0/#example-prefetch-templates","text":"1 2 3 4 5 6 7 { prefetch : { p : Patient/{{context.patientId}} , a1c : Observation?patient={{context.patientId}} code=4548-4 _count=1 sort:desc=date , u : Practitioner/{{user}} } } Here is an example prefetch field from a CDS Service discovery endpoint. The goal is to know, at call time: Key Description p Patient demographics a1c Most recent Hemoglobin A1c reading for this patient u Information on the current user (Practitioner)","title":"Example prefetch templates"},{"location":"specification/1.0/#example-prefetch-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { prefetch : { p :{ resourceType : Patient , gender : male , birthDate : 1974-12-25 , ... : snipped for brevity }, a1c : { resourceType : Bundle , type : searchset , entry : [{ resource : { resourceType : Observation , code : { coding : [{ system : http://loinc.org , code : 4548-4 , display : Hemoglobin A1c }] }, ... : snipped for brevity } }] } } } The response is augmented to include two prefetch values, where the dictionary keys match the request keys ( p and a1c in this case). Note that the missing u key indicates that either the EHR has decided not to satisfy this particular prefetch template or it was not able to retrieve this prefetched data. The CDS Service is responsible for retrieving this Practitioner data from the FHIR server (if required).","title":"Example prefetch response"},{"location":"specification/1.0/#prefetch-query-restrictions","text":"To reduce the implementation burden on EHRs that support CDS Services, CDS Hooks recommends that prefetch queries only use a subset of the full functionality available in the FHIR specification. Valid prefetch URLs should only contain: instance level read interactions (for resources with known ids such as Patient and Practitioner ) type level search interactions Patient references (e.g. patient={{context.patientId}} ) token search parameters using equality (e.g. code=4548-4 ) and optionally the :in modifier (no other modifiers for token parameters) date search parameters on date , dateTime , instant , or Period types only, and using only the prefixes eq , lt , gt , ge , le the _count parameter to limit the number of results returned the _sort parameter to allow for most recent and first queries","title":"Prefetch query restrictions"},{"location":"specification/1.0/#fhir-resource-access","text":"The CDS Service is able to use the EHR's FHIR server to obtain any FHIR resources it requires beyond those provided by the EHR as prefetched data. This is similar to the approach used by SMART on FHIR wherein the SMART app requests and ultimately obtains an access token from the EHR's Authorization server using the SMART launch workflow, as described in SMART App Authorization Guide . Like SMART on FHIR, CDS Hooks requires that clients present a valid access token to the FHIR server with each API call. Thus, a CDS Service must be able to obtain an access token before communicating with the EHR's FHIR resource server. While CDS Hooks shares the underlying technical framework and standards as SMART on FHIR, the CDS Hooks workflow must accommodate the automated, low-latency delivery of an access token to the CDS service. With CDS Hooks, if the EHR wants to provide the CDS Service direct access to FHIR resources, the EHR creates an access token prior to invoking the CDS Service, passing this token to the CDS Service as part of the service call. This approach remains compatible with OAuth 2.0's bearer token protocol while minimizing the number of HTTPS round-trips and the service invocation latency. The EHR remains in control of creating an access token that is associated with the specific CDS Service, user, and context of the invocation. As the CDS Service executes on behalf of a user, the data to which the CDS Service is given access MUST BE limited to the same restrictions and authorizations afforded the current user. As such, the access token SHALL BE scoped to: The CDS Service being invoked The current user","title":"FHIR Resource Access"},{"location":"specification/1.0/#passing-the-access-token-to-the-cds-service","text":"The access token is specified in the CDS Service request via the OPTIONAL fhirAuthorization request parameter. This parameter is an object that contains both the access token as well as other related information. If the EHR chooses not to pass along an access token, the fhirAuthorization parameter is omitted. Field Optionality Type Description access_token REQUIRED string This is the OAuth 2 access token that provides access to the FHIR server. token_type REQUIRED string Fixed value: Bearer . expires_in REQUIRED integer The lifetime in seconds of the access token. scope REQUIRED string The scopes the access token grants the CDS Service. subject REQUIRED string The OAuth 2.0 client identifier of the CDS Service, as registered with the EHR's authorization server. The scopes granted to the CDS Service via the scope field are defined by the SMART on FHIR specification . The expires_in value is established by the authorization server and SHOULD BE very short lived, as the access token must be treated as a transient value by the CDS Service. Below is an example fhirAuthorization parameter: 1 2 3 4 5 6 7 8 9 { fhirAuthorization : { access_token : some-opaque-fhir-access-token , token_type : Bearer , expires_in : 300 , scope : patient/Patient.read patient/Observation.read , subject : cds-service4 } }","title":"Passing the Access Token to the CDS Service"},{"location":"specification/1.0/#cds-service-response","text":"","title":"CDS Service Response"},{"location":"specification/1.0/#card-array","text":"Field Optionality Type Description cards REQUIRED array An array of Cards . Cards can provide a combination of information (for reading), suggested actions (to be applied if a user selects them), and links (to launch an app if the user selects them). The EHR decides how to display cards, but we recommend displaying suggestions using buttons, and links using underlined text. If your CDS Service has no decision support for the user, your service should return a 200 HTTP response with an empty array of cards. Response when no decision support is necessary for the user 1 2 3 { cards : [] }","title":"Card Array"},{"location":"specification/1.0/#card-attributes","text":"Each Card is described by the following attributes. Field Optionality Type Description summary REQUIRED string One-sentence, 140-character summary message for display to the user inside of this card. detail OPTIONAL string Optional detailed information to display; if provided MUST BE represented in (GitHub Flavored) Markdown without HTML. (For non-urgent cards, the EHR MAY hide these details until the user clicks a link like \"view more details...\".) indicator REQUIRED string Urgency/importance of what this card conveys. Allowed values, in order of increasing urgency, are: info , warning , hard-stop . The EHR MAY use this field to help make UI display decisions such as sort order or coloring. The value hard-stop indicates that the workflow should not be allowed to proceed. source REQUIRED object Grouping structure for the Source of the information displayed on this card. The source should be the primary source of guidance for the decision support the card represents. suggestions OPTIONAL array of Suggestions Allows a service to suggest a set of changes in the context of the current activity (e.g. changing the dose of the medication currently being prescribed, for the medication-prescribe activity). If used, the user MUST BE allowed to choose no more than one suggestion. links OPTIONAL array of Links Allows a service to suggest a link to an app that the user might want to run for additional information or to help guide a decision.","title":"Card Attributes"},{"location":"specification/1.0/#source","text":"The Source is described by the following attributes. Field Optionality Type Description label REQUIRED string A short, human-readable label to display for the source of the information displayed on this card. If a url is also specified, this may be the text for the hyperlink. url OPTIONAL URL An optional absolute URL to load (via GET , in a browser context) when a user clicks on this link to learn more about the organization or data set that provided the information on this card. Note that this URL should not be used to supply a context-specific \"drill-down\" view of the information on this card. For that, use link.url instead. icon OPTIONAL URL An optional absolute URL to an icon for the source of this card. The icon returned by this URL should be in PNG format, an image size of 100x100 pixels, and must not include any transparent regions.","title":"Source"},{"location":"specification/1.0/#suggestion","text":"Each Suggestion is described by the following attributes. Field Optionality Type Description label REQUIRED string Human-readable label to display for this suggestion (e.g. the EHR might render this as the text on a button tied to this suggestion). uuid OPTIONAL string Unique identifier for this suggestion. For details see Suggestion Tracking Analytics actions OPTIONAL array Array of objects, each defining a suggested action. Within a suggestion, all actions are logically AND'd together, such that a user selecting a suggestion selects all of the actions within it.","title":"Suggestion"},{"location":"specification/1.0/#suggestion-tracking-analytics","text":"Whenever a user clicks a displayed label (e.g., button) from a \"suggestion\" card, the EHR uses the suggestion uuid to notify the CDS Service's analytics endpoint via a POST with an empty body: 1 `POST {baseUrl}/cds-services/{serviceId}/analytics/{uuid}` If a suggestion has no uuid , the EHR does not send a notification.","title":"Suggestion Tracking Analytics"},{"location":"specification/1.0/#action","text":"Each Action is described by the following attributes. Field Optionality Type Description type REQUIRED string The type of action being performed. Allowed values are: create , update , delete . description REQUIRED string Human-readable description of the suggested action. May be presented to the end-user. resource OPTIONAL object Depending upon the type attribute, a new resource or the id of a resource. For a type of create , the resource attribute contains a new FHIR resource to apply within the current activity (e.g. for medication-prescribe , this holds the updated prescription as proposed by the suggestion). For delete , this is the id of any resource to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove an order from the pending list). In activities like medication-prescribe where only one \"content\" resource is ever relevant, this field may be omitted. For update , this holds the updated resource to modify from the current activity (e.g. for the order-review activity, this would provide a way to annotate an order from the pending list with an assessment).","title":"Action"},{"location":"specification/1.0/#link","text":"Each Link is described by the following attributes. Field Optionality Type Description label REQUIRED string Human-readable label to display for this link (e.g. the EHR might render this as the underlined text of a clickable link). url REQUIRED URL URL to load (via GET , in a browser context) when a user clicks on this link. Note that this may be a \"deep link\" with context embedded in path segments, query parameters, or a hash. type REQUIRED string The type of the given URL. There are two possible values for this field. A type of absolute indicates that the URL is absolute and should be treated as-is. A type of smart indicates that the URL is a SMART app launch URL and the EHR should ensure the SMART app launch URL is populated with the appropriate SMART launch parameters. appContext OPTIONAL string An optional field that allows the CDS Service to pass context regarding the launch of this SMART app from the CDS card to the SMART app. The appContext field should only be valued if the link type is smart and is not valid for absolute links. The appContext field and value will be sent to the SMART app as part of the OAuth 2 access token response, alongside the other launch context when the SMART app is launched.","title":"Link"},{"location":"specification/1.0/#example_1","text":"Example response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { cards : [ { summary : Example Card , indicator : info , detail : This is an example card. , source : { label : Static CDS Service Example , url : https://example.com , icon : https://example.com/img/icon-100px.png }, links : [ { label : Google , url : https://google.com , type : absolute }, { label : Github , url : https://github.com , type : absolute }, { label : SMART Example App , url : https://smart.example.com/launch , type : smart , appContext : module-123 } ] }, { summary : Another card , indicator : warning , source : { label : Static CDS Service Example } } ] }","title":"Example"},{"location":"specification/1.0/#security-and-safety","text":"Security and safety risks associated with the CDS Hooks API include: The risk that confidential information and privileged authorizations transmitted between an EHR and a CDS Service could be surreptitiously intercepted by an attacker; The risk that an attacker masquerading as a legitimate CDS Service could receive confidential information or privileged authorizations from an EHR, or could provide to an EHR decision support recommendations that could be harmful to a patient; The risk that an attacker masquerading as a legitimate service-subscribing EHR (i.e., man-in-the-middle) could intercept and possibly alter data exchanged between the two parties. The risk that a CDS Service could embed dangerous suggestions or links to dangerous apps in Cards returned to an EHR. The risk that a CDS Hooks browser-based deployment could be victimized by a Cross-Origin Resource Sharing (CORS) attack. The risk that a CDS Service could return a decision based on outdated patient data, resulting in a safety risk to the patient. CDS Hooks defines a security model that addresses these risks by assuring that the identities of both the CDS Service and the EHR are authenticated to each other; by protecting confidential information and privileged authorizations shared between an EHR and a CDS Service; by recommending means of assuring data freshness; and by incorporating business mechanisms through which trust is established and maintained between an EHR and a CDS Service.","title":"Security and Safety"},{"location":"specification/1.0/#trusting-cds-services","text":"Prior to enabling EHRs to request decision support from any CDS Service, the EHR vendor and/or provider organization is expected to perform due diligence on the CDS Service provider. Each EHR vendor/provider is individually responsible for determining the suitability, safety and integrity of the CDS Services it uses, based on the organization's own risk-management strategy. Each EHR vendor/provider SHOULD maintain a \"white list\" (and/or \"black list\") of the CDS Services it has vetted, and the Card links that have been deemed safe to display from within the EHR context. Each provider organization is expected to work with its EHR vendor to choose what CDS Services to allow and to negotiate the conditions under which the CDS Services may be called. Once a CDS Service provider is selected, the EHR vendor/provider negotiates the terms under which service will be provided. This negotiation includes agreement on patient data elements that will be prefetched and provided to the CDS Service, data elements that will be made available through an access token passed by the EHR, and steps the CDS Service must take to protect patient data and access tokens. To enable the EHR authorization server to authorize CDS Service access to FHIR resources, the CDS Service is registered as a client to the EHR authorization server. These business arrangements are documented in the service agreement. Every interaction between an EHR and a CDS Service is initiated by the EHR sending a service request to a CDS Service endpoint protected using the Transport Layer Security protocol . Through the TLS protocol the identity of the CDS Service is authenticated, and an encrypted transmission channel is established between the EHR and the CDS Service. Both the Discovery endpoint and individual CDS Service endpoints are TLS secured. The EHR\u2019s authorization server is responsible for enforcing restrictions on the CDS Services that may be called and the scope of the FHIR resources that may be prefetched or retrieved from the FHIR server. Therefore, all CDS Services to be called from within an EHR system MUST BE pre-registered with the authorization server of that EHR. Pre-registration MUST include registering a CDS client identifier, and agreeing upon the scope of FHIR access that is minimally necessary to provide the clinical decision support required.","title":"Trusting CDS Services"},{"location":"specification/1.0/#trusting-ehrs","text":"The service agreement negotiated between the EHR vendor/provider and the CDS Service provider will include obligations the EHR vendor/provider commits to the CDS Service provider. Some agreements may include the use of mutual TLS, in which both ends of the channel are authenticated. However, mutual TLS is impractical for many organizations, and because the EHR initiates the TLS channel set-up, only the CDS Service endpoint will be authenticated. To enable the CDS Service to authenticate the identity of the EHR, CDS Hooks uses digitally signed JSON web tokens (JWT) . Each time an EHR transmits a request to a CDS Service, the request MUST include an Authorization header presenting the JWT as a \u201cBearer\u201d token: 1 Authorization: Bearer {{JWT}} Note that this is for every single CDS Service call, whether that be a Discovery call, a single CDS Service invocation, or multiple exchanges relating to a single service. Also note that mutual TLS MAY be used alongside JSON web tokens to establish trust of the EHR by the CDS Service. The EHR MUST use its private key to digitally sign the JWT, using the JSON Web Signatures (rfc7515) standard. The JWT header contains the following fields (see rfc7515 section 4.1 for further information on these standard headers): Field Optionality Type Value alg REQUIRED string The cryptographic algorithm used to sign this JWT. kid REQUIRED string The identifier of the key-pair used to sign this JWT. This identifier MUST be unique within the EHR's JWK Set. typ REQUIRED string Fixed value: JWT . jku OPTIONAL url The URL to the JWK Set containing the public key(s). The JWT payload contains the following fields: Field Optionality Type Value iss REQUIRED string The URI of the issuer of this JWT. Note that the JWT may be self-issued by the EHR, or may be issued by a third-party identity provider. sub REQUIRED string Client_id of the EHR. aud REQUIRED string or array of string The CDS Service endpoint that is being called by the EHR. (See more details below). exp REQUIRED number Expiration time integer for this authentication JWT, expressed in seconds since the \"Epoch\" (1970-01-01T00:00:00Z UTC). iat REQUIRED number The time at which this JWT was issued, expressed in seconds since the \"Epoch\" (1970-01-01T00:00:00Z UTC). jti REQUIRED string A nonce string value that uniquely identifies this authentication JWT (used to protect against replay attacks) CDS Services SHOULD whitelist the iss , jku and sub fields to only the EHRs they trust. Per rfc7519 , the aud value is either a string or an array of strings. For CDS Hooks, this value MUST BE the URL of the CDS Service endpoint being invoked. For example, consider a CDS Service available at a base URL of https://cds.example.org . When the EHR invokes the CDS Service discovery endpoint, the aud value is either \"https://cds.example.org/cds-services\" or [\"https://cds.example.org/cds-services\"] . Similarly, when the EHR invokes a particular CDS Service (say, some-service ), the aud value is either \"https://cds.example.org/cds-services/some-service\" or [\"https://cds.example.org/cds-services/some-service\"] . The EHR MUST make its public key, expressed as a JSON Web Key (JWK) in a JWK Set, as defined by rfc7517 . The kid value from the JWT header allows a CDS Service to identify the correct JWK in the JWK Set that can be used to verify the signature. The EHR MAY make its JWK Set available via a URL identified by the jku header field, as defined by rfc7515 4.1.2 . If the jku header field is ommitted, the EHR and CDS Service SHALL communicate the JWK Set out-of-band. An example JSON web token header and payload: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { alg : ES384 , typ : JWT , kid : example-kid , jku : https://fhir-ehr.example.com/jwk_uri } { iss : https://fhir-ehr.example.com/ , sub : client_id , aud : https://cds.example.org/cds-services/some-service , exp : 1422568860 , iat : 1311280970 , jti : ee22b021-e1b7-4611-ba5b-8eec6a33ac1e } Using the above JWT payload, the complete JWT as passed in the Authorization HTTP header would be: 1 Authorization: Bearer eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6ImV4YW1wbGUta2lkIiwiamt1IjoiaHR0cHM6Ly9maGlyLWVoci5leGFtcGxlLmNvbS9qd2tfdXJpIn0.eyJpc3MiOiJodHRwczovL2ZoaXItZWhyLmV4YW1wbGUuY29tLyIsInN1YiI6ImNsaWVudF9pZCIsImF1ZCI6Imh0dHBzOi8vY2RzLmV4YW1wbGUub3JnL2Nkcy1zZXJ2aWNlcy9zb21lLXNlcnZpY2UiLCJleHAiOjE0MjI1Njg4NjAsImlhdCI6MTMxMTI4MDk3MCwianRpIjoiZWUyMmIwMjEtZTFiNy00NjExLWJhNWItOGVlYzZhMzNhYzFlIn0.230VxOubItskK-HCzdfjR5Y76nEydquQoqK-JDHbl8y8wzo-7HJetYpY1R4rytp_yJJCc8DULX9G5llPKx6opQ","title":"Trusting EHRs"},{"location":"specification/1.0/#cross-origin-resource-sharing","text":"Cross-origin resource sharing (CORS) is a W3C standard mechanism that uses additional HTTP headers to enable a web browser to gain permission to access resources from an Internet domain different from that from which the browser is currently accessing. CORS is a client-side security mechanism with well-documented security risks. CDS Services and browser-based EHRs will require CORS support. A secure implementation guide for CORS is outside of the scope of this CDS Hooks specification. Organizations planning to implement CDS Hooks with CORS support are referred to the Cross-Origin Resource Sharing section of the OWASP HTML5 Security Cheat Sheet .","title":"Cross-Origin Resource Sharing"},{"location":"specification/1.0/#extensions","text":"The specification is not prescriptive about support for extensions. However, to support extensions, the specification reserves the name extension and will never define an element with that name, allowing implementations to use it to provide custom behavior and information. The value of an extension element should be a pre-coordinated JSON object. For example, an extension on a request could look like this: 1 2 3 4 5 6 7 8 9 10 { hookInstance : d1577c69-dfbe-44ad-ba6d-3e05e953b2ea , fhirServer : http://fhir.example.org:9080 , hook : patient-view , user : Practitioner/example , extension : { com.example.timestamp : 2017-11-27T22:13:25Z , myextension-practitionerspecialty : gastroenterology } } As another example, an extension defined on the discovery response could look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { services : [ { title : Example CDS Service Discovery , hook : patient-view , id : patientview , prefetch : { patient : Patient/{{context.patientId}} }, description : clinical decision support for patient view , extension : { example-client-conformance : http://hooks.example.org/fhir/102/Conformance/patientview } } ] }","title":"Extensions"}]}